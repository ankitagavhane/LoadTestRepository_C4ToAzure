//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Twinfield_NewFramework
{
    using System;
    using System.Collections.Generic;
    using System.Collections.Concurrent;
    using System.Linq;

    using System.Text;
    using Microsoft.VisualStudio.TestTools.WebTesting;
    using Microsoft.VisualStudio.TestTools.WebTesting.Rules;
    using Newtonsoft.Json;
    using Microsoft.VisualStudio.TestTools.LoadTesting;
    //using MicrosoftServicesTestLabs.Monitor.VSTSUnitTest;
    using System.Drawing;
    using System.Threading;
    using System.Data;
    using System.Reflection;

    public class PayAndCollectRun
    {
        WebTest webTest;
        private Dictionary<string, string> localDictionary;
        WebTestRequestPlugin objPlugin = new WebTestRequestPlugin();    //object of webTesRequestPlugin class to access the variables uniquely in each thread.
        private InputTableRecord testRecord;
        public Object assemblyinitializeLock = new Object();
        private WebTestContext _textContext;
        private object virtualuserId;
        private object doLogin;
        string OfficeManagementID = string.Empty;
        private string companyTypeDescription;

        public PayAndCollectRun(WebTest webTest)
        {
            this.webTest = webTest;
            
        }
        public WebTestContext TestContext
        {
            get { return _textContext; }

            set { _textContext = value; }
        }
        
        public IEnumerator<WebTestRequest> GetRequestEnumerator(TwinfieldDBTenant DBTenant,string userDictionaryKey, WebTestRequestPlugin objPlugin)
        {
            var WebBTPrefix = TwinfieldScenarioPrefix.PCR_ + DBTenant.ToString() + "_";
            _textContext = webTest.Context;
            _textContext.TryGetValue("doLogin", out doLogin);
            _textContext.TryGetValue("UserId", out virtualuserId);

            SharedThreadData threadData;
            
            #region DoLogin
            if (Convert.ToBoolean(doLogin))
            {
                webTest.Context.CookieContainer = new System.Net.CookieContainer();

                try
                {
                    localDictionary = CustomDS.Instance.GetNextRowTwinfield(DBTenant, TwinfieldScenarioName.PayAndCollectRun);
                    
                    threadData = new SharedThreadData(Convert.ToInt32(virtualuserId),this.TestContext);
                    threadData.UserName = localDictionary["UserName"];
                    threadData.Tenant = localDictionary["DBTenant"];
                    threadData.CustomerName = localDictionary["CustomerName"];
                    threadData.hasFullAccess = localDictionary["hasFullAccess"];
                    threadData.Password = AssemblyLoad.Password;
                    threadData.ScenarioPrefix = WebBTPrefix;
                    CustomDS.Instance.Save_PayAndCollectRun_UserData(Convert.ToInt32(virtualuserId), threadData, DBTenant);
                    Logger.WriteGeneralLogUser(TwinfieldScenarioName.PayAndCollectRun + " : " + DBTenant + " : LoggedIn : " + virtualuserId); 
                }
                catch (Exception ex)
                {

                    Logger.WriteGeneralLog("Input Data not fetched for:" + TwinfieldScenarioName.PayAndCollectRun);
                    throw new Exception("Error in reading data for " + TwinfieldScenarioName.PayAndCollectRun + " : " + ex.Message);

                }
                if(threadData.hasFullAccess=="0")
                {
                    foreach (var request in webTest.LaunchLogin(threadData, objPlugin)) yield return request;
                }
                else
                {
                    foreach (var request in webTest.LaunchLogin_FullAccess(threadData, objPlugin)) yield return request;
                }
                //RTMonitor.Write(Color.Green, "Create Invoice Login User: " + threadData.UserName + "with iteration no :" + threadData.iterationCount + " LoginTime: " + DateTime.Now + "\r\n");
                CustomDS.Instance.Save_PayAndCollectRun_UserData(Convert.ToInt32(virtualuserId), threadData, DBTenant);
                //Logger.WriteGeneralLog("Create Invoice : Vuser - " + Convert.ToInt32(virtualuserId).ToString() + " Logged In");
            }
            else
            {
                try
                {
                    threadData = CustomDS.Instance.Get_PayAndCollectRun_UserData(Convert.ToInt32(virtualuserId), DBTenant);
                    Logger.WriteGeneralLogUser(TwinfieldScenarioName.PayAndCollectRun + " : " + DBTenant + " : NotLoggedIn : " + virtualuserId);

                }
                catch (Exception ex)
                {

                    Logger.WriteGeneralLog("Input Data not saved for :" + TwinfieldScenarioName.PayAndCollectRun);
                    throw new Exception("Error in getting data for " + TwinfieldScenarioName.PayAndCollectRun + " : " + ex.Message);

                }
            }
            #endregion DoLogin

            WebBTPrefix = threadData.ScenarioPrefix;
            string WebRequestPrefix = "";

            Thread.Sleep(2000);

            #region ClickOn_SalesTab
            webTest.BeginTransaction(WebBTPrefix + "ClickOn_SalesTab");
            WebRequestPrefix = "ST_";

            webTest.BeginTransaction(WebRequestPrefix + "api_notifications");
            WebTestRequest request184 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/notifications"));
            request184.Headers.Add(new WebTestRequestHeader("Accept", "application/vnd.twinfield+json;version=latest"));
            request184.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            request184.QueryStringParameters.Add("since", "2018-09-04T08:53:57.990Z", false, false);
            yield return request184;
            request184 = null;
            webTest.EndTransaction(WebRequestPrefix + "api_notifications");

            webTest.BeginTransaction(WebRequestPrefix + "en-GB_sales_sales.html");
            WebTestRequest request185 = new WebTestRequest((webTest.Context["TwfcndURL"].ToString() + "/" + threadData.BuildVersion + "/en-GB/sales/sales.html"));
            request185.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/plain, */*;version=latest"));
            request185.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request185;
            request185 = null;
            webTest.EndTransaction(WebRequestPrefix + "en-GB_sales_sales.html");

            webTest.BeginTransaction(WebRequestPrefix + "api_sales_revenuetypes");
            WebTestRequest request186 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/sales/revenuetypes"));
            request186.Method = "OPTIONS";
            request186.Headers.Add(new WebTestRequestHeader("Accept", "application/vnd.twinfield+json;version=latest"));
            request186.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            StringHttpBody request186Body = new StringHttpBody();
            request186Body.ContentType = "";
            request186Body.InsertByteOrderMark = false;
            request186Body.BodyString = "";
            request186.Body = request186Body;
            yield return request186;
            request186 = null;
            webTest.EndTransaction(WebRequestPrefix + "api_sales_revenuetypes");

            webTest.BeginTransaction(WebRequestPrefix + "api_sales_invoices");
            WebTestRequest request187 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/sales/invoices"));
            request187.Method = "OPTIONS";
            request187.Headers.Add(new WebTestRequestHeader("Accept", "application/vnd.twinfield+json;version=latest"));
            request187.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            StringHttpBody request187Body = new StringHttpBody();
            request187Body.ContentType = "";
            request187Body.InsertByteOrderMark = false;
            request187Body.BodyString = "";
            request187.Body = request187Body;
            yield return request187;
            request187 = null;
            webTest.EndTransaction(WebRequestPrefix + "api_sales_invoices");

            webTest.BeginTransaction(WebRequestPrefix + "framework_desktop_view_cr-basic-group-tile.html");
            WebTestRequest request188 = new WebTestRequest((webTest.Context["TwfcndURL"].ToString() + "/" + threadData.BuildVersion + "/en-GB/_components/framework/desktop/view/cr-basic-group-tile.html"));
            request188.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/plain, */*;version=latest"));
            request188.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request188;
            request188 = null;
            webTest.EndTransaction(WebRequestPrefix + "framework_desktop_view_cr-basic-group-tile.html");

            webTest.BeginTransaction(WebRequestPrefix + "framework_desktop_view_cr-divider-tile.html");
            WebTestRequest request189 = new WebTestRequest((webTest.Context["TwfcndURL"].ToString() + "/" + threadData.BuildVersion + "/en-GB/_components/framework/desktop/view/cr-divider-tile.html"));
            request189.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/plain, */*;version=latest"));
            request189.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request189;
            request189 = null;
            webTest.EndTransaction(WebRequestPrefix + "framework_desktop_view_cr-divider-tile.html");

            webTest.BeginTransaction(WebRequestPrefix + "desktop_view_cr-dashboard-sub-section-tile.htm");
            WebTestRequest request190 = new WebTestRequest((webTest.Context["TwfcndURL"].ToString() + "/" + threadData.BuildVersion + "/en-GB/_components/framework/desktop/view/cr-dashboard-sub-section-tile.htm" +
                    "l"));
            request190.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/plain, */*;version=latest"));
            request190.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request190;
            request190 = null;
            webTest.EndTransaction(WebRequestPrefix + "desktop_view_cr-dashboard-sub-section-tile.htm");

            webTest.BeginTransaction(WebRequestPrefix + "api_sales_customers");
            WebTestRequest request191 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/sales/customers"));
            request191.Method = "OPTIONS";
            request191.Headers.Add(new WebTestRequestHeader("Accept", "application/vnd.twinfield+json;version=latest"));
            request191.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            StringHttpBody request191Body = new StringHttpBody();
            request191Body.ContentType = "";
            request191Body.InsertByteOrderMark = false;
            request191Body.BodyString = "";
            request191.Body = request191Body;
            yield return request191;
            request191 = null;
            webTest.EndTransaction(WebRequestPrefix + "api_sales_customers");

            webTest.BeginTransaction(WebRequestPrefix + "framework_desktop_view_cr-insight-tile-view.html");
            WebTestRequest request192 = new WebTestRequest((webTest.Context["TwfcndURL"].ToString() + "/" + threadData.BuildVersion + "/en-GB/_components/framework/desktop/view/cr-insight-tile-view.html"));
            request192.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/plain, */*;version=latest"));
            request192.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request192;
            request192 = null;
            webTest.EndTransaction(WebRequestPrefix + "framework_desktop_view_cr-insight-tile-view.html");

            webTest.BeginTransaction(WebRequestPrefix + "framework_desktop_view_cr-links-tile.html");
            WebTestRequest request193 = new WebTestRequest((webTest.Context["TwfcndURL"].ToString() + "/" + threadData.BuildVersion + "/en-GB/_components/framework/desktop/view/cr-links-tile.html"));
            request193.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/plain, */*;version=latest"));
            request193.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request193;
            request193 = null;
            webTest.EndTransaction(WebRequestPrefix + "framework_desktop_view_cr-links-tile.html");

            webTest.BeginTransaction(WebRequestPrefix + "api_sales_invoices_overview");
            WebTestRequest request194 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/sales/invoices/overview"));
            request194.Headers.Add(new WebTestRequestHeader("Accept", "application/vnd.twinfield+json;version=latest"));
            request194.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request194;
            request194 = null;
            webTest.EndTransaction(WebRequestPrefix + "api_sales_invoices_overview");

            webTest.BeginTransaction(WebRequestPrefix + "api_sales_invoices_overview_1");
            WebTestRequest request195 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/sales/invoices/overview"));
            request195.Headers.Add(new WebTestRequestHeader("Accept", "application/vnd.twinfield+json;version=latest"));
            request195.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request195;
            request195 = null;
            webTest.EndTransaction(WebRequestPrefix + "api_sales_invoices_overview_1");

            webTest.BeginTransaction(WebRequestPrefix + "api_tasks");
            WebTestRequest request196 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/tasks"));
            request196.Headers.Add(new WebTestRequestHeader("Accept", "application/vnd.twinfield+json;version=latest"));
            request196.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request196;
            request196 = null;
            webTest.EndTransaction(WebRequestPrefix + "api_tasks");

            webTest.EndTransaction(WebBTPrefix + "ClickOn_SalesTab");

            #endregion

            Thread.Sleep(2000);

            #region Click_PayAndCollect
            webTest.BeginTransaction(WebBTPrefix + "Click_PayAndCollect");
            WebRequestPrefix = "PAC_";

            webTest.BeginTransaction(WebRequestPrefix + "UI");
            WebTestRequest request197 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/UI/"));
            request197.ExpectedResponseUrl = (webTest.Context["AccountingURL"].ToString() + "/UI/#/Sales/PayAndCollect");
            yield return request197;
            request197 = null;
            webTest.EndTransaction(WebRequestPrefix + "UI");

            webTest.BeginTransaction(WebRequestPrefix + "en-GB_home_classic_classic.html");
            WebTestRequest request198 = new WebTestRequest((webTest.Context["TwfcndURL"].ToString() + "/" + threadData.BuildVersion + "/en-GB/home/classic/classic.html"));
            request198.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/plain, */*;version=latest"));
            request198.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request198;
            request198 = null;
            webTest.EndTransaction(WebRequestPrefix + "en-GB_home_classic_classic.html");

            webTest.BeginTransaction(WebRequestPrefix + "pay_default.aspx");
            WebTestRequest request199 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/pay/default.aspx"));
            request199.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            request199.QueryStringParameters.Add("paytype", "pay", false, false);
            yield return request199;
            request199 = null;
            webTest.EndTransaction(WebRequestPrefix + "pay_default.aspx");

            webTest.BeginTransaction(WebRequestPrefix + "api_tasks_1");
            WebTestRequest request200 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/tasks"));
            request200.Headers.Add(new WebTestRequestHeader("Accept", "application/vnd.twinfield+json;version=latest"));
            request200.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request200;
            request200 = null;
            webTest.EndTransaction(WebRequestPrefix + "api_tasks_1");

            webTest.BeginTransaction(WebRequestPrefix + "api_notifications_1");
            WebTestRequest request201 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/notifications"));
            request201.Headers.Add(new WebTestRequestHeader("Accept", "application/vnd.twinfield+json;version=latest"));
            request201.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            request201.QueryStringParameters.Add("since", "2018-09-04T08:53:57.990Z", false, false);
            yield return request201;
            request201 = null;
            webTest.EndTransaction(WebRequestPrefix + "api_notifications_1");

            webTest.EndTransaction(WebBTPrefix + "Click_PayAndCollect");
            #endregion

            Thread.Sleep(2000);

            #region ClickNew_OnPayAndCollect
            webTest.BeginTransaction(WebBTPrefix + "ClickNew_OnPayAndCollect");
            WebRequestPrefix = "New_";

            webTest.BeginTransaction(WebRequestPrefix + "desktop_navigate.aspx");
            WebTestRequest request202 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/desktop/navigate.aspx"));
            request202.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/pay/default.aspx?paytype=pay")));
            request202.QueryStringParameters.Add("treebase", "%23PAY%3a", false, false);
            yield return request202;
            request202 = null;
            webTest.EndTransaction(WebRequestPrefix + "desktop_navigate.aspx");

            webTest.BeginTransaction(WebRequestPrefix + "api_notifications_2");
            WebTestRequest request203 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/notifications"));
            request203.Headers.Add(new WebTestRequestHeader("Accept", "application/vnd.twinfield+json;version=latest"));
            request203.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            request203.QueryStringParameters.Add("since", "2018-09-04T08:53:57.990Z", false, false);
            yield return request203;
            request203 = null;
            webTest.EndTransaction(WebRequestPrefix + "api_notifications_2");

            webTest.EndTransaction(WebBTPrefix + "ClickNew_OnPayAndCollect");
            #endregion

            Thread.Sleep(2000);

            #region Click_SEPAIncasso
            webTest.BeginTransaction(WebBTPrefix + "Click_SEPAIncasso");
            WebRequestPrefix = "SI_";

            webTest.BeginTransaction(WebRequestPrefix + "pay_paylist.aspx");
            WebTestRequest request204 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/pay/paylist.aspx"));
            request204.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/desktop/navigate.aspx?treebase=%23PAY%3a")));
            request204.QueryStringParameters.Add("treebase", "%23PAY%3a", false, false);
            request204.QueryStringParameters.Add("code", "SEPANLDD", false, false);
            request204.QueryStringParameters.Add("shortname", "SEPA+incasso+Nederland", false, false);
            yield return request204;
            request204 = null;
            webTest.EndTransaction(WebRequestPrefix + "pay_paylist.aspx");

            webTest.BeginTransaction(WebRequestPrefix + "api_notifications_3");
            WebTestRequest request205 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/notifications"));
            request205.Headers.Add(new WebTestRequestHeader("Accept", "application/vnd.twinfield+json;version=latest"));
            request205.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            request205.QueryStringParameters.Add("since", "2018-09-04T08:53:57.990Z", false, false);
            yield return request205;
            request205 = null;
            webTest.EndTransaction(WebRequestPrefix + "api_notifications_3");

            webTest.EndTransaction(WebBTPrefix + "Click_SEPAIncasso");
            #endregion

            Thread.Sleep(2000);
            var txtPaydate = DateTime.Now.AddDays(1).ToString("dd/MM/yyyy");
            var txtYear = DateTime.Now.AddDays(1).Year.ToString();
            var txtPeriod = DateTime.Now.AddDays(1).Month.ToString();
           
            #region ClickNext_ToCreatePayAndCollectTransaction
            webTest.BeginTransaction(WebBTPrefix + "ClickNext_ToCreatePayAndCollectTransaction");
            WebRequestPrefix = "Next2_";

            webTest.BeginTransaction(WebRequestPrefix + "pay_paylist.aspx_2");
            WebTestRequest request207 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/pay/paylist.aspx"));
            request207.Method = "POST";
            request207.ExpectedResponseUrl = (webTest.Context["AccountingURL"].ToString() + "/pay/default.aspx");
            request207.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/pay/paylist.aspx?treebase=%23PAY%3a&code=SEPANLDD&shortname=SEPA+incasso+Nederland")));
            FormPostHttpBody request207Body = new FormPostHttpBody();
            request207Body.FormPostParameters.Add("hdnFromForm", "1");
            request207Body.FormPostParameters.Add("txtPaydate", txtPaydate);
            request207Body.FormPostParameters.Add("txtYear", txtYear);
            request207Body.FormPostParameters.Add("txtPeriod", txtPeriod);
            request207Body.FormPostParameters.Add("rdiMethod", "1");
            request207Body.FormPostParameters.Add("chkRemove", "1");
            request207Body.FormPostParameters.Add("txtBank", "BNK");
            request207Body.FormPostParameters.Add("txtBankText", "Standaard bank");
            request207Body.FormPostParameters.Add("hdnCode", "SEPANLDD");
            request207Body.FormPostParameters.Add("txtTempXmlID", "0");
            request207Body.FormPostParameters.Add("txtWarnedFields", "");
            request207Body.FormPostParameters.Add("txtFrom3", "");
            request207Body.FormPostParameters.Add("txtFromN3", "");
            request207Body.FormPostParameters.Add("txtTo3", "");
            request207Body.FormPostParameters.Add("txtToN3", "");
            request207Body.FormPostParameters.Add("hdnListID1", "3");
            request207Body.FormPostParameters.Add("txtFrom5", "");
            request207Body.FormPostParameters.Add("hdnListID2", "5");
            request207Body.FormPostParameters.Add("txtFrom6", "");
            request207Body.FormPostParameters.Add("hdnListID3", "6");
            request207Body.FormPostParameters.Add("txtDiscountDaysTolerance", "0");
            request207Body.FormPostParameters.Add("hdnAskCount", "3");
            request207Body.FormPostParameters.Add("btnNext.x", "Next >");
            request207.Body = request207Body;
            yield return request207;
            request207 = null;
            webTest.EndTransaction(WebRequestPrefix + "pay_paylist.aspx_2");

            webTest.BeginTransaction(WebRequestPrefix + "pay_default.aspx_11");
            WebTestRequest request207DependentRequest = new WebTestRequest(webTest.Context["AccountingURL"].ToString() + "/pay/default.aspx");
            request207DependentRequest.Method = "GET";
            request207DependentRequest.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/pay/paylist.aspx?treebase=%23PAY%3a&code=SEPANLDD&shortname=SEPA+incasso+Nederland")));
            yield return request207DependentRequest;
            request207DependentRequest = null;
            webTest.EndTransaction(WebRequestPrefix + "pay_default.aspx_11");

            webTest.BeginTransaction(WebRequestPrefix + "api_notifications_4");
            WebTestRequest request208 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/notifications"));
            request208.Headers.Add(new WebTestRequestHeader("Accept", "application/vnd.twinfield+json;version=latest"));
            request208.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            request208.QueryStringParameters.Add("since", "2018-09-04T08:53:57.990Z", false, false);
            yield return request208;
            request208 = null;
            webTest.EndTransaction(WebRequestPrefix + "api_notifications_4");

            webTest.EndTransaction(WebBTPrefix + "ClickNext_ToCreatePayAndCollectTransaction");
            #endregion

            Thread.Sleep(2000);
            
            string tempXmlId = webTest.Context["tempXmlId"].ToString();
            string hdnRowCount = webTest.Context["hdnRowCount"].ToString();
            string hdnFromForm = webTest.Context["hdnFromForm"].ToString();
            string txtButtonPushedId = webTest.Context["txtButtonPushedId"].ToString();
            
            #region ClickRefresh_ToCheckTransactionCompletedOrNot
            webTest.BeginTransaction(WebBTPrefix + "ClickRefresh_ToCheckTransactionCompletedOrNot");
            WebRequestPrefix = "RT_";

            webTest.BeginTransaction(WebRequestPrefix + "pay_default.aspx_1");
            WebTestRequest request209 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/pay/default.aspx"));
            request209.Method = "POST";
            request209.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/pay/default.aspx")));
            FormPostHttpBody request209Body = new FormPostHttpBody();
            request209Body.FormPostParameters.Add("hdnNavFirstValue", "1");
            request209Body.FormPostParameters.Add("hdnNavLinesPerPage", "10");
            request209Body.FormPostParameters.Add("hdnRowCount", hdnRowCount);// "1");
            request209Body.FormPostParameters.Add("hdnFromForm", hdnFromForm);// "1");
            request209Body.FormPostParameters.Add("txtButtonPushedId", txtButtonPushedId);// "");
            request209Body.FormPostParameters.Add("tempXml", tempXmlId);// "1885566339");
            request209.Body = request209Body;
            yield return request209;
            request209 = null;
            webTest.EndTransaction(WebRequestPrefix + "pay_default.aspx_1");

            webTest.EndTransaction(WebBTPrefix + "ClickRefresh_ToCheckTransactionCompletedOrNot");
            #endregion

            Thread.Sleep(2000);

            #region Authorize_PayAndCollectTransaction
            webTest.BeginTransaction(WebBTPrefix + "Authorize_PayAndCollectTransaction");
            WebRequestPrefix = "A_";

            webTest.BeginTransaction(WebRequestPrefix + "pay_default.aspx_2");
            WebTestRequest request210 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/pay/default.aspx"));
            request210.Method = "POST";
            request210.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/pay/default.aspx")));
            FormPostHttpBody request210Body = new FormPostHttpBody();
            request210Body.FormPostParameters.Add("hdnNavFirstValue", "1");
            request210Body.FormPostParameters.Add("hdnNavLinesPerPage", "10");
            request210Body.FormPostParameters.Add("hdnRowCount", hdnRowCount);
            request210Body.FormPostParameters.Add("hdnFromForm", hdnFromForm);
            request210Body.FormPostParameters.Add("txtButtonPushedId", "btnAuthorise1.x");
            request210Body.FormPostParameters.Add("tempXml", tempXmlId);// "1885566339");
            request210.Body = request210Body;
            yield return request210;
            request210 = null;
            webTest.EndTransaction(WebRequestPrefix + "pay_default.aspx_2");

            webTest.EndTransaction(WebBTPrefix + "Authorize_PayAndCollectTransaction");
            #endregion

            Thread.Sleep(10000);

            #region ClickRefresh_ToCheckAuthorizationCompletedOrNot
            webTest.BeginTransaction(WebBTPrefix + "ClickRefresh_ToCheckAuthorizationCompletedOrNot");
            WebRequestPrefix = "RA_";

            webTest.BeginTransaction(WebRequestPrefix + "pay_default.aspx_3");
            WebTestRequest request211 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/pay/default.aspx"));
            request211.Method = "POST";
            request211.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/pay/default.aspx")));
            FormPostHttpBody request211Body = new FormPostHttpBody();
            request211Body.FormPostParameters.Add("hdnNavFirstValue", "1");
            request211Body.FormPostParameters.Add("hdnNavLinesPerPage", "10");
            request211Body.FormPostParameters.Add("hdnRowCount", hdnRowCount);
            request211Body.FormPostParameters.Add("hdnFromForm", hdnFromForm);
            request211Body.FormPostParameters.Add("txtButtonPushedId", "");
            request211Body.FormPostParameters.Add("tempXml", tempXmlId);// "1885566339");
            request211.Body = request211Body;
            yield return request211;
            request211 = null;
            webTest.EndTransaction(WebRequestPrefix + "pay_default.aspx_3");

            List<string> extractedValues = new List<string>();
            extractedValues= CommonFunctions.GetBetweenList(webTest.LastResponse.BodyString, "makepayfile.aspx?code=SEPANLDD&amp;number=", "&amp;touched=5\"");
            string paymentFileNumner = extractedValues.Last();


            webTest.BeginTransaction(WebRequestPrefix + "api_notifications_5");
            WebTestRequest request212 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/notifications"));
            request212.Headers.Add(new WebTestRequestHeader("Accept", "application/vnd.twinfield+json;version=latest"));
            request212.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            request212.QueryStringParameters.Add("since", "2018-09-04T09:01:04.873Z", false, false);
            yield return request212;
            request212 = null;
            webTest.EndTransaction(WebRequestPrefix + "api_notifications_5");

            webTest.EndTransaction(WebBTPrefix + "ClickRefresh_ToCheckAuthorizationCompletedOrNot");
            #endregion

            Thread.Sleep(2000);

            #region CreateTransactionFile
            webTest.BeginTransaction(WebBTPrefix + "CreateTransactionFile");
            WebRequestPrefix = "CTF_";

            webTest.BeginTransaction(WebRequestPrefix + "pay_makepayfile.aspx");
            WebTestRequest request213 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/pay/makepayfile.aspx"));
            request213.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/pay/default.aspx")));
            request213.QueryStringParameters.Add("code", "SEPANLDD", false, false);
            request213.QueryStringParameters.Add("number", paymentFileNumner, false, false);// "1", false, false);
            request213.QueryStringParameters.Add("touched", "5", false, false);
            yield return request213;
            request213 = null;
            webTest.EndTransaction(WebRequestPrefix + "pay_makepayfile.aspx");

            webTest.BeginTransaction(WebRequestPrefix + "api_notifications_6");
            WebTestRequest request214 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/notifications"));
            request214.Headers.Add(new WebTestRequestHeader("Accept", "application/vnd.twinfield+json;version=latest"));
            request214.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            request214.QueryStringParameters.Add("since", "2018-09-04T09:02:18.177Z", false, false);
            yield return request214;
            request214 = null;
            webTest.EndTransaction(WebRequestPrefix + "api_notifications_6");

            webTest.EndTransaction(WebBTPrefix + "CreateTransactionFile");
            #endregion

            Thread.Sleep(2000);

            #region CreateFile
            webTest.BeginTransaction(WebBTPrefix + "CreateFile");
            WebRequestPrefix = "CF_";

            webTest.BeginTransaction(WebRequestPrefix + "pay_makepayfile.aspx_1");
            WebTestRequest request215 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/pay/makepayfile.aspx"));
            request215.Method = "POST";
            request215.ExpectedResponseUrl = (webTest.Context["AccountingURL"].ToString() + "/pay/default.aspx");
            request215.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/pay/makepayfile.aspx?code=SEPANLDD&number=1&touched=5")));
            FormPostHttpBody request215Body = new FormPostHttpBody();
            request215Body.FormPostParameters.Add("txtPayRun", "SEPANLDD/"+paymentFileNumner); // "SEPANLDD/1")
            request215Body.FormPostParameters.Add("hdnTouched", "5");
            request215Body.FormPostParameters.Add("txtButtonPushedId", "");
            request215Body.FormPostParameters.Add("btnCreate.x", "Create file");
            request215.Body = request215Body;
            yield return request215;
            request215 = null;
            webTest.EndTransaction(WebRequestPrefix + "pay_makepayfile.aspx_1");

            webTest.BeginTransaction(WebRequestPrefix + "api_notifications_7");
            WebTestRequest request216 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/notifications"));
            request216.Headers.Add(new WebTestRequestHeader("Accept", "application/vnd.twinfield+json;version=latest"));
            request216.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            request216.QueryStringParameters.Add("since", "2018-09-04T09:02:18.177Z", false, false);
            yield return request216;
            request216 = null;
            webTest.EndTransaction(WebRequestPrefix + "api_notifications_7");

            webTest.EndTransaction(WebBTPrefix + "CreateFile");
            #endregion

            Thread.Sleep(2000);
            tempXmlId = webTest.Context["tempXmlId"].ToString();
            hdnRowCount = webTest.Context["hdnRowCount"].ToString();
            hdnFromForm = webTest.Context["hdnFromForm"].ToString();
            txtButtonPushedId = webTest.Context["txtButtonPushedId"].ToString();

            #region ClickRefresh_ToCheckFileIsCreatedOrNot
            webTest.BeginTransaction(WebBTPrefix + "ClickRefresh_ToCheckFileIsCreatedOrNot");
            WebRequestPrefix = "RF_";

            webTest.BeginTransaction(WebRequestPrefix + "pay_default.aspx_4");
            WebTestRequest request217 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/pay/default.aspx"));
            request217.Method = "POST";
            request217.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/pay/default.aspx")));
            FormPostHttpBody request217Body = new FormPostHttpBody();
            request217Body.FormPostParameters.Add("hdnNavFirstValue", "1");
            request217Body.FormPostParameters.Add("hdnNavLinesPerPage", "10");
            request217Body.FormPostParameters.Add("hdnRowCount", hdnRowCount);
            request217Body.FormPostParameters.Add("hdnFromForm", hdnFromForm);
            request217Body.FormPostParameters.Add("txtButtonPushedId", txtButtonPushedId);
            request217Body.FormPostParameters.Add("tempXml", tempXmlId);//"3909505"
            request217.Body = request217Body;
            yield return request217;
            request217 = null;
            webTest.EndTransaction(WebRequestPrefix + "pay_default.aspx_4");

            webTest.BeginTransaction(WebRequestPrefix + "api_notifications_8");
            WebTestRequest request218 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/notifications"));
            request218.Headers.Add(new WebTestRequestHeader("Accept", "application/vnd.twinfield+json;version=latest"));
            request218.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            request218.QueryStringParameters.Add("since", "2018-09-04T09:03:32.660Z", false, false);
            yield return request218;
            request218 = null;
            webTest.EndTransaction(WebRequestPrefix + "api_notifications_8");

            webTest.BeginTransaction(WebRequestPrefix + "api_notifications_9");
            WebTestRequest request219 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/notifications"));
            request219.Headers.Add(new WebTestRequestHeader("Accept", "application/vnd.twinfield+json;version=latest"));
            request219.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            request219.QueryStringParameters.Add("since", "2018-09-04T09:03:32.660Z", false, false);
            yield return request219;
            request219 = null;
            webTest.EndTransaction(WebRequestPrefix + "api_notifications_9");

            webTest.BeginTransaction(WebRequestPrefix + "api_notifications_10");
            WebTestRequest request220 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/notifications"));
            request220.Headers.Add(new WebTestRequestHeader("Accept", "application/vnd.twinfield+json;version=latest"));
            request220.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            request220.QueryStringParameters.Add("since", "2018-09-04T09:03:32.660Z", false, false);
            yield return request220;
            request220 = null;
            webTest.EndTransaction(WebRequestPrefix + "api_notifications_10");

            webTest.EndTransaction(WebBTPrefix + "ClickRefresh_ToCheckFileIsCreatedOrNot");
            #endregion

            #region Commented Reverse Transaction 

            //Thread.Sleep(2000);

            //#region ReverseTransaction
            //webTest.BeginTransaction(WebBTPrefix + "ReverseTransaction");
            //WebRequestPrefix = "RTrx_";

            //webTest.BeginTransaction(WebRequestPrefix + "api_notifications_11");
            //WebTestRequest request221 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/notifications"));
            //request221.Headers.Add(new WebTestRequestHeader("Accept", "application/vnd.twinfield+json;version=latest"));
            //request221.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            //request221.QueryStringParameters.Add("since", "2018-09-04T09:03:32.660Z", false, false);
            //yield return request221;
            //request221 = null;
            //webTest.EndTransaction(WebRequestPrefix + "api_notifications_11");

            //webTest.BeginTransaction(WebRequestPrefix + "pay_default.aspx_5");
            //WebTestRequest request222 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/pay/default.aspx"));
            //request222.Method = "POST";
            //request222.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/pay/default.aspx")));
            //FormPostHttpBody request222Body = new FormPostHttpBody();
            //request222Body.FormPostParameters.Add("hdnNavFirstValue", "1");
            //request222Body.FormPostParameters.Add("hdnNavLinesPerPage", "10");
            //request222Body.FormPostParameters.Add("hdnRowCount", "1");
            //request222Body.FormPostParameters.Add("hdnFromForm", "1");
            //request222Body.FormPostParameters.Add("txtButtonPushedId", "btnRollBack1.x");
            //request222Body.FormPostParameters.Add("tempXml", "3909505");
            //request222.Body = request222Body;
            //yield return request222;
            //request222 = null;
            //webTest.EndTransaction(WebRequestPrefix + "pay_default.aspx_5");

            //webTest.EndTransaction(WebBTPrefix + "ReverseTransaction");
            //#endregion

            //Thread.Sleep(2000);

            //#region RefreshTillReverseOperationCompletes
            //webTest.BeginTransaction(WebBTPrefix + "RefreshTillReverseOperationCompletes");
            //WebRequestPrefix = "RRT_";

            //webTest.BeginTransaction(WebRequestPrefix + "pay_default.aspx_6");
            //WebTestRequest request223 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/pay/default.aspx"));
            //request223.Method = "POST";
            //request223.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/pay/default.aspx")));
            //FormPostHttpBody request223Body = new FormPostHttpBody();
            //request223Body.FormPostParameters.Add("hdnNavFirstValue", "1");
            //request223Body.FormPostParameters.Add("hdnNavLinesPerPage", "10");
            //request223Body.FormPostParameters.Add("hdnRowCount", "1");
            //request223Body.FormPostParameters.Add("hdnFromForm", "1");
            //request223Body.FormPostParameters.Add("txtButtonPushedId", "");
            //request223Body.FormPostParameters.Add("tempXml", "3909505");
            //request223.Body = request223Body;
            //yield return request223;
            //request223 = null;
            //webTest.EndTransaction(WebRequestPrefix + "pay_default.aspx_6");

            //webTest.EndTransaction(WebBTPrefix + "RefreshTillReverseOperationCompletes");
            //#endregion 
            #endregion

            if ((Convert.ToInt32(webTest.Context["iterationNo"])% Convert.ToInt32(webTest.Context["maxiterationNo"])) ==0)
            {

                Thread.Sleep(2000);

                foreach (var request in webTest.Logout(threadData, objPlugin)) yield return request;
                
            }
        }
        
    }
    public class PayAndCollectRun_A : WebTest
    {
        PayAndCollectRun _PayAndCollectRun = null;
        WebTestRequestPlugin objPlugin = new WebTestRequestPlugin();
        private WebTestContext _textContext;
        public PayAndCollectRun_A()
        {
            if (_PayAndCollectRun == null)
                _PayAndCollectRun = new PayAndCollectRun(this);


            this.Context.Add("LoginMain", AssemblyLoad.LoginMain);
            this.Context.Add("AccountingURL", AssemblyLoad.AccountingURL);
            this.Context.Add("TwfcndURL", AssemblyLoad.TwfcndURL);
            this.PreAuthenticate = true;
            this.Proxy = "default";
            this.StopOnError = true;
            _textContext = this.Context;

            this.PreWebTest += TwinfieldWebLoadTestPlugin.PreWebTestEvent;
            this.PreRequest += objPlugin.Test_PreRequest;
            this.PostRequest += objPlugin.Test_PostRequest;
        }

        public override IEnumerator<WebTestRequest> GetRequestEnumerator()
        {
            _textContext= this._textContext;
            return _PayAndCollectRun.GetRequestEnumerator(TwinfieldDBTenant.A, Context.WebTestUserId.ToString(), objPlugin);
        }
    }

    public class PayAndCollectRun_B : WebTest
    {
        PayAndCollectRun _PayAndCollectRun = null;
        WebTestRequestPlugin objPlugin = new WebTestRequestPlugin();
        private WebTestContext _textContext;
        public PayAndCollectRun_B()
        {
            if (_PayAndCollectRun == null)
                _PayAndCollectRun = new PayAndCollectRun(this);


            this.Context.Add("LoginMain", AssemblyLoad.LoginMain);
            this.Context.Add("AccountingURL", AssemblyLoad.AccountingURL);
            this.Context.Add("TwfcndURL", AssemblyLoad.TwfcndURL);
            this.PreAuthenticate = true;
            this.Proxy = "default";
            this.StopOnError = true;
            _textContext = this.Context;

            this.PreWebTest += TwinfieldWebLoadTestPlugin.PreWebTestEvent;
            this.PreRequest += objPlugin.Test_PreRequest;
            this.PostRequest += objPlugin.Test_PostRequest;
        }

        public override IEnumerator<WebTestRequest> GetRequestEnumerator()
        {
            _textContext = this._textContext;
            return _PayAndCollectRun.GetRequestEnumerator(TwinfieldDBTenant.B, Context.WebTestUserId.ToString(), objPlugin);
        }
    }

    public class PayAndCollectRun_C : WebTest
    {
        PayAndCollectRun _PayAndCollectRun = null;
        WebTestRequestPlugin objPlugin = new WebTestRequestPlugin();
        private WebTestContext _textContext;
        public PayAndCollectRun_C()
        {
            if (_PayAndCollectRun == null)
                _PayAndCollectRun = new PayAndCollectRun(this);


            this.Context.Add("LoginMain", AssemblyLoad.LoginMain);
            this.Context.Add("AccountingURL", AssemblyLoad.AccountingURL);
            this.Context.Add("TwfcndURL", AssemblyLoad.TwfcndURL);
            this.PreAuthenticate = true;
            this.Proxy = "default";
            this.StopOnError = true;
            _textContext = this.Context;

            this.PreWebTest += TwinfieldWebLoadTestPlugin.PreWebTestEvent;
            this.PreRequest += objPlugin.Test_PreRequest;
            this.PostRequest += objPlugin.Test_PostRequest;
        }

        public override IEnumerator<WebTestRequest> GetRequestEnumerator()
        {
            _textContext = this._textContext;
            return _PayAndCollectRun.GetRequestEnumerator(TwinfieldDBTenant.C, Context.WebTestUserId.ToString(), objPlugin);
        }
    }

    public class PayAndCollectRun_D : WebTest
    {
        PayAndCollectRun _PayAndCollectRun = null;
        WebTestRequestPlugin objPlugin = new WebTestRequestPlugin();
        private WebTestContext _textContext;
        public PayAndCollectRun_D()
        {
            if (_PayAndCollectRun == null)
                _PayAndCollectRun = new PayAndCollectRun(this);


            this.Context.Add("LoginMain", AssemblyLoad.LoginMain);
            this.Context.Add("AccountingURL", AssemblyLoad.AccountingURL);
            this.Context.Add("TwfcndURL", AssemblyLoad.TwfcndURL);
            this.PreAuthenticate = true;
            this.Proxy = "default";
            this.StopOnError = true;
            _textContext = this.Context;

            this.PreWebTest += TwinfieldWebLoadTestPlugin.PreWebTestEvent;
            this.PreRequest += objPlugin.Test_PreRequest;
            this.PostRequest += objPlugin.Test_PostRequest;
        }

        public override IEnumerator<WebTestRequest> GetRequestEnumerator()
        {
            _textContext = this._textContext;
            return _PayAndCollectRun.GetRequestEnumerator(TwinfieldDBTenant.D, Context.WebTestUserId.ToString(), objPlugin);
        }
    }

    public class PayAndCollectRun_E : WebTest
    {
        PayAndCollectRun _PayAndCollectRun = null;
        WebTestRequestPlugin objPlugin = new WebTestRequestPlugin();
        private WebTestContext _textContext;
        public PayAndCollectRun_E()
        {
            if (_PayAndCollectRun == null)
                _PayAndCollectRun = new PayAndCollectRun(this);


            this.Context.Add("LoginMain", AssemblyLoad.LoginMain);
            this.Context.Add("AccountingURL", AssemblyLoad.AccountingURL);
            this.Context.Add("TwfcndURL", AssemblyLoad.TwfcndURL);
            this.PreAuthenticate = true;
            this.Proxy = "default";
            this.StopOnError = true;
            _textContext = this.Context;

            this.PreWebTest += TwinfieldWebLoadTestPlugin.PreWebTestEvent;
            this.PreRequest += objPlugin.Test_PreRequest;
            this.PostRequest += objPlugin.Test_PostRequest;
        }

        public override IEnumerator<WebTestRequest> GetRequestEnumerator()
        {
            _textContext = this._textContext;
            return _PayAndCollectRun.GetRequestEnumerator(TwinfieldDBTenant.E, Context.WebTestUserId.ToString(), objPlugin);
        }
    }
}
