//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Twinfield_NewFramework
{
    using System;
    using System.Collections.Generic;
    using System.Text;
    using Microsoft.VisualStudio.TestTools.WebTesting;
    using Microsoft.VisualStudio.TestTools.WebTesting.Rules;
    using Newtonsoft.Json;
    using Microsoft.VisualStudio.TestTools.LoadTesting;
    //using MicrosoftServicesTestLabs.Monitor.VSTSUnitTest;
    using System.Drawing;
    using System.Threading;
    using System.Data;
    using System.Reflection;

    public class CompanySettings
    {
        WebTest webTest;
        private Dictionary<string, string> localDictionary;
        WebTestRequestPlugin objPlugin = new WebTestRequestPlugin();    //object of webTesRequestPlugin class to access the variables uniquely in each thread.
        private InputTableRecord testRecord;
        public Object assemblyinitializeLock = new Object();
        private WebTestContext _textContext;
        private object virtualuserId;
        private object doLogin;
        string OfficeManagementID = string.Empty;
        private string companyTypeDescription;

        public CompanySettings(WebTest webTest)
        {
            this.webTest = webTest;
            
        }
        public WebTestContext TestContext
        {
            get { return _textContext; }

            set { _textContext = value; }
        }
        
        public IEnumerator<WebTestRequest> GetRequestEnumerator(TwinfieldDBTenant DBTenant,string userDictionaryKey, WebTestRequestPlugin objPlugin)
        {
            var WebBTPrefix = TwinfieldScenarioPrefix.CS_ + DBTenant.ToString()+"_";
            _textContext = webTest.Context;
            _textContext.TryGetValue("doLogin", out doLogin);
            _textContext.TryGetValue("UserId", out virtualuserId);

            SharedThreadData threadData;

            #region DoLogin
            if (Convert.ToBoolean(doLogin))
            {
                webTest.Context.CookieContainer = new System.Net.CookieContainer();

                try
                {
                    localDictionary = CustomDS.Instance.GetNextRowTwinfield(DBTenant, TwinfieldScenarioName.CompanySettings);
                    
                    threadData = new SharedThreadData(Convert.ToInt32(virtualuserId),this.TestContext);
                    threadData.UserName = localDictionary["UserName"];
                    threadData.Tenant = localDictionary["DBTenant"];
                    threadData.CustomerName = localDictionary["CustomerName"];
                    threadData.hasFullAccess = localDictionary["hasFullAccess"];
                    threadData.Password = AssemblyLoad.Password;
                    threadData.ScenarioPrefix = WebBTPrefix;
                    CustomDS.Instance.Save_CompanySettings_UserData(Convert.ToInt32(virtualuserId), threadData, DBTenant);
                    Logger.WriteGeneralLogUser(TwinfieldScenarioName.CompanySettings + " : " + DBTenant + " : LoggedIn : " + virtualuserId); 
                }
                catch (Exception ex)
                {

                    Logger.WriteGeneralLog("Input Data not fetched for:" + TwinfieldScenarioName.CompanySettings);
                    throw new Exception("Error in reading data for " + TwinfieldScenarioName.CompanySettings + " : " + ex.Message);

                }
                if(threadData.hasFullAccess=="0")
                {
                    foreach (var request in webTest.LaunchLogin(threadData, objPlugin)) yield return request;
                }
                else
                {
                    foreach (var request in webTest.LaunchLogin_FullAccess(threadData, objPlugin)) yield return request;
                }
                //RTMonitor.Write(Color.Green, "Create Invoice Login User: " + threadData.UserName + "with iteration no :" + threadData.iterationCount + " LoginTime: " + DateTime.Now + "\r\n");
                CustomDS.Instance.Save_CompanySettings_UserData(Convert.ToInt32(virtualuserId), threadData, DBTenant);
                //Logger.WriteGeneralLog("Create Invoice : Vuser - " + Convert.ToInt32(virtualuserId).ToString() + " Logged In");
            }
            else
            {
                try
                {
                    threadData = CustomDS.Instance.Get_CompanySettings_UserData(Convert.ToInt32(virtualuserId), DBTenant);
                    Logger.WriteGeneralLogUser(TwinfieldScenarioName.CompanySettings + " : " + DBTenant + " : NotLoggedIn : " + virtualuserId);

                }
                catch (Exception ex)
                {

                    Logger.WriteGeneralLog("Input Data not saved for :" + TwinfieldScenarioName.CompanySettings);
                    throw new Exception("Error in getting data for " + TwinfieldScenarioName.CompanySettings + " : " + ex.Message);

                }
            }
            #endregion DoLogin

            OfficeManagementID = threadData._textContext["OfficeMgtID"].ToString(); // webTest.Context["OfficeMgtID"].ToString();
            WebBTPrefix = threadData.ScenarioPrefix;
            string WebRequestPrefix = "";
            var settings = new JsonSerializerSettings
            {
                NullValueHandling = NullValueHandling.Ignore,
                MissingMemberHandling = MissingMemberHandling.Ignore
            };
            
            #region CS_ClickOnSettings
            webTest.BeginTransaction(WebBTPrefix + "ClickOnSettings");
            WebRequestPrefix = "COS_";
            webTest.BeginTransaction(WebRequestPrefix + "en-GB_settings_company_company.html");
            WebTestRequest request146 = new WebTestRequest((webTest.Context["TwfcndURL"].ToString() + "/" + threadData.BuildVersion + "/en-GB/settings/company/company.html"));
            request146.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/plain, */*;version=latest"));
            request146.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request146;
            request146 = null;
            webTest.EndTransaction(WebRequestPrefix + "en-GB_settings_company_company.html");
            
            webTest.BeginTransaction(WebRequestPrefix + "api_vatmanagement");
            WebTestRequest request147 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/vatmanagement"));
            request147.Method = "OPTIONS";
            request147.Headers.Add(new WebTestRequestHeader("Accept", "application/vnd.twinfield+json;version=latest"));
            request147.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request147;
            request147 = null;
            webTest.EndTransaction(WebRequestPrefix + "api_vatmanagement");
            
            webTest.BeginTransaction(WebRequestPrefix + "desktop_view_cr-dashboard-sub-section-tile.htm");
            WebTestRequest request148 = new WebTestRequest((webTest.Context["TwfcndURL"].ToString() + "/" + threadData.BuildVersion + "/en-GB/_components/framework/desktop/view/cr-dashboard-sub-section-tile.htm" +
                    "l"));
            request148.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/plain, */*;version=latest"));
            request148.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request148;
            request148 = null;
            webTest.EndTransaction(WebRequestPrefix + "desktop_view_cr-dashboard-sub-section-tile.htm");
            
            webTest.BeginTransaction(WebRequestPrefix + "api_tasks");
            WebTestRequest request149 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/tasks"));
            request149.Headers.Add(new WebTestRequestHeader("Accept", "application/vnd.twinfield+json;version=latest"));
            request149.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request149;
            request149 = null;
            webTest.EndTransaction(WebRequestPrefix + "api_tasks");

            webTest.EndTransaction(WebBTPrefix + "ClickOnSettings");
            #endregion

            Thread.Sleep(2000);

            #region CS_GoToCompanySettings
            webTest.BeginTransaction(WebBTPrefix + "CompanySettingsTab");
            WebRequestPrefix = "CST_";

            webTest.BeginTransaction(WebRequestPrefix + "UI");
            WebTestRequest request150 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/UI/"));
            request150.ExpectedResponseUrl = (webTest.Context["AccountingURL"].ToString() + "/UI/#/Settings/Company/Settings");
            yield return request150;
            request150 = null;
            webTest.EndTransaction(WebRequestPrefix + "UI");



            webTest.BeginTransaction(WebRequestPrefix + "en-GB_companies_form_company.html");
            WebTestRequest request151 = new WebTestRequest((webTest.Context["TwfcndURL"].ToString() + "/" + threadData.BuildVersion + "/en-GB/companies/form/company.html"));
            request151.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/plain, */*;version=latest"));
            request151.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            ExtractText extraction2 = new ExtractText();
            extraction2.StartsWith = "\"AccountantInternal\": \"";
            extraction2.EndsWith = "\",";
            extraction2.IgnoreCase = false;
            extraction2.UseRegularExpression = false;
            extraction2.Required = true;
            extraction2.ExtractRandomMatch = false;
            extraction2.Index = 0;
            extraction2.HtmlDecode = true;
            extraction2.SearchInHeaders = false;
            extraction2.ContextParameterName = "companyTypeDescription";
            request151.ExtractValues += new EventHandler<ExtractionEventArgs>(extraction2.Extract);
            yield return request151;
            request151 = null;
            webTest.EndTransaction(WebRequestPrefix + "en-GB_companies_form_company.html");


            companyTypeDescription = webTest.Context["companyTypeDescription"].ToString();

            webTest.BeginTransaction(WebRequestPrefix + "activity-title_view_ui-activity-title-view.html");
            WebTestRequest request152 = new WebTestRequest((webTest.Context["TwfcndURL"].ToString() + "/" + threadData.BuildVersion + "/en-GB/_ui/activity/activity-title/view/ui-activity-title-view.html"));
            request152.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/plain, */*;version=latest"));
            request152.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request152;
            request152 = null;
            webTest.EndTransaction(WebRequestPrefix + "activity-title_view_ui-activity-title-view.html");

            webTest.BeginTransaction(WebRequestPrefix + "ui_buckets_view_ui-activity-buckets-view.html");
            WebTestRequest request153 = new WebTestRequest((webTest.Context["TwfcndURL"].ToString() + "/" + threadData.BuildVersion + "/en-GB/_ui/buckets/view/ui-activity-buckets-view.html"));
            request153.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/plain, */*;version=latest"));
            request153.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request153;
            request153 = null;
            webTest.EndTransaction(WebRequestPrefix + "ui_buckets_view_ui-activity-buckets-view.html");

            webTest.BeginTransaction(WebRequestPrefix + "en-GB__ui_form_view_ui-form-view.html");
            WebTestRequest request154 = new WebTestRequest((webTest.Context["TwfcndURL"].ToString() + "/" + threadData.BuildVersion + "/en-GB/_ui/form/view/ui-form-view.html"));
            request154.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/plain, */*;version=latest"));
            request154.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request154;
            request154 = null;
            webTest.EndTransaction(WebRequestPrefix + "en-GB__ui_form_view_ui-form-view.html");

            webTest.BeginTransaction(WebRequestPrefix + "ui_related_view_ui-activity-related-view.html");
            WebTestRequest request155 = new WebTestRequest((webTest.Context["TwfcndURL"].ToString() + "/" + threadData.BuildVersion + "/en-GB/_ui/related/view/ui-activity-related-view.html"));
            request155.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/plain, */*;version=latest"));
            request155.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request155;
            request155 = null;
            webTest.EndTransaction(WebRequestPrefix + "ui_related_view_ui-activity-related-view.html");

            webTest.BeginTransaction(WebRequestPrefix + "api_purchase");
            WebTestRequest request156 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/purchase"));
            request156.Method = "OPTIONS";
            request156.Headers.Add(new WebTestRequestHeader("Accept", "application/vnd.twinfield+json;version=latest"));
            request156.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request156;
            request156 = null;
            webTest.EndTransaction(WebRequestPrefix + "api_purchase");

            webTest.BeginTransaction(WebRequestPrefix + "ui_activity_actions_view_ui-actions-view.html");
            WebTestRequest request157 = new WebTestRequest((webTest.Context["TwfcndURL"].ToString() + "/" + threadData.BuildVersion + "/en-GB/_ui/activity/actions/view/ui-actions-view.html"));
            request157.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/plain, */*;version=latest"));
            request157.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request157;
            request157 = null;
            webTest.EndTransaction(WebRequestPrefix + "ui_activity_actions_view_ui-actions-view.html");

            webTest.BeginTransaction(WebRequestPrefix + "api_officemanagement_offices_office");
            WebTestRequest request158 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/officemanagement/offices/office/" + OfficeManagementID));
            request158.Headers.Add(new WebTestRequestHeader("Accept", "application/vnd.twinfield+json;version=latest"));
            request158.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request158;
            request158 = null;
            webTest.EndTransaction(WebRequestPrefix + "api_officemanagement_offices_office");


            //Getting the company details for SaveSettings Call
            Company companies = JsonConvert.DeserializeObject<Company>(webTest.LastResponse.BodyString);
            var countryCode = companies.officeInformation.countryCode.ToString();
            InitializationAndTranslation initializationAndTranslation = JsonConvert.DeserializeObject<InitializationAndTranslation>(threadData._textContext["InitializationAndTranslation"].ToString());

            webTest.BeginTransaction(WebRequestPrefix + "api_officemanagement_supportedcultures");
            WebTestRequest request159 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/officemanagement/supportedcultures"));
            request159.Headers.Add(new WebTestRequestHeader("Accept", "application/vnd.twinfield+json;version=latest"));
            request159.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request159;
            request159 = null;
            webTest.EndTransaction(WebRequestPrefix + "api_officemanagement_supportedcultures");

            webTest.BeginTransaction(WebRequestPrefix + "api_officemanagement_industrialclassification");
            WebTestRequest request160 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/officemanagement/industrialclassification"));
            request160.Headers.Add(new WebTestRequestHeader("Accept", "application/vnd.twinfield+json;version=latest"));
            request160.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request160;
            request160 = null;
            webTest.EndTransaction(WebRequestPrefix + "api_officemanagement_industrialclassification");

            webTest.BeginTransaction(WebRequestPrefix + "api_officemanagement_bankaccountledgermask");
            WebTestRequest request161 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/officemanagement/bankaccountledgermask"));
            request161.Headers.Add(new WebTestRequestHeader("Accept", "application/vnd.twinfield+json;version=latest"));
            request161.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request161;
            request161 = null;
            webTest.EndTransaction(WebRequestPrefix + "api_officemanagement_bankaccountledgermask");

            webTest.BeginTransaction(WebRequestPrefix + "api_officemanagement_paymentdiscounttypes");
            WebTestRequest request162 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/officemanagement/paymentdiscounttypes"));
            request162.Headers.Add(new WebTestRequestHeader("Accept", "application/vnd.twinfield+json;version=latest"));
            request162.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request162;
            request162 = null;
            webTest.EndTransaction(WebRequestPrefix + "api_officemanagement_paymentdiscounttypes");

            webTest.BeginTransaction(WebRequestPrefix + "api_officemanagement_todolists");
            WebTestRequest request163 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/officemanagement/todolists"));
            request163.Headers.Add(new WebTestRequestHeader("Accept", "application/vnd.twinfield+json;version=latest"));
            request163.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request163;
            request163 = null;
            webTest.EndTransaction(WebRequestPrefix + "api_officemanagement_todolists");

            webTest.BeginTransaction(WebRequestPrefix + "api_officemanagement_templateoffices");
            WebTestRequest request164 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/officemanagement/templateoffices"));
            request164.Headers.Add(new WebTestRequestHeader("Accept", "application/vnd.twinfield+json;version=latest"));
            request164.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request164;
            request164 = null;
            webTest.EndTransaction(WebRequestPrefix + "api_officemanagement_templateoffices");

            webTest.BeginTransaction(WebRequestPrefix + "api_officemanagement_officegroups");
            WebTestRequest request165 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/officemanagement/officegroups"));
            request165.Headers.Add(new WebTestRequestHeader("Accept", "application/vnd.twinfield+json;version=latest"));
            request165.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request165;
            request165 = null;
            webTest.EndTransaction(WebRequestPrefix + "api_officemanagement_officegroups");

            webTest.BeginTransaction(WebRequestPrefix + "view_ui-activity-description-view.");
            WebTestRequest request166 = new WebTestRequest((webTest.Context["TwfcndURL"].ToString() + "/" + threadData.BuildVersion + "/en-GB/_ui/activity/activity-description/view/ui-activity-description-view." +
                    "html"));
            request166.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/plain, */*;version=latest"));
            request166.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request166;
            request166 = null;
            webTest.EndTransaction(WebRequestPrefix + "view_ui-activity-description-view.");

            webTest.BeginTransaction(WebRequestPrefix + "api_tasks_1");
            WebTestRequest request167 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/tasks"));
            request167.Headers.Add(new WebTestRequestHeader("Accept", "application/vnd.twinfield+json;version=latest"));
            request167.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request167;
            request167 = null;
            webTest.EndTransaction(WebRequestPrefix + "api_tasks_1");

            webTest.BeginTransaction(WebRequestPrefix + "actions_view_ui-actions-notifications-view.html");
            WebTestRequest request168 = new WebTestRequest((webTest.Context["TwfcndURL"].ToString() + "/" + threadData.BuildVersion + "/en-GB/_ui/activity/actions/view/ui-actions-notifications-view.html"));
            request168.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/plain, */*;version=latest"));
            request168.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request168;
            request168 = null;
            webTest.EndTransaction(WebRequestPrefix + "actions_view_ui-actions-notifications-view.html");

            webTest.BeginTransaction(WebRequestPrefix + "view_partials_ui-actions-view-primaries.html");
            WebTestRequest request169 = new WebTestRequest((webTest.Context["TwfcndURL"].ToString() + "/" + threadData.BuildVersion + "/en-GB/_ui/activity/actions/view/partials/ui-actions-view-primaries.html"));
            request169.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/plain, */*;version=latest"));
            request169.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request169;
            request169 = null;
            webTest.EndTransaction(WebRequestPrefix + "view_partials_ui-actions-view-primaries.html");

            webTest.BeginTransaction(WebRequestPrefix + "view_partials_ui-actions-view-laterals.html");
            WebTestRequest request170 = new WebTestRequest((webTest.Context["TwfcndURL"].ToString() + "/" + threadData.BuildVersion + "/en-GB/_ui/activity/actions/view/partials/ui-actions-view-laterals.html"));
            request170.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/plain, */*;version=latest"));
            request170.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request170;
            request170 = null;
            webTest.EndTransaction(WebRequestPrefix + "view_partials_ui-actions-view-laterals.html");

            webTest.BeginTransaction(WebRequestPrefix + "related_view_ui-activity-related-item-view.html");
            WebTestRequest request171 = new WebTestRequest((webTest.Context["TwfcndURL"].ToString() + "/" + threadData.BuildVersion + "/en-GB/_ui/related/view/ui-activity-related-item-view.html"));
            request171.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/plain, */*;version=latest"));
            request171.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request171;
            request171 = null;
            webTest.EndTransaction(WebRequestPrefix + "related_view_ui-activity-related-item-view.html");

            webTest.BeginTransaction(WebRequestPrefix + "api_officemanagement_offices_office_1");
            WebTestRequest request172 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/officemanagement/offices/office/" + OfficeManagementID));
            request172.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/plain, */*;version=latest"));
            request172.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request172;
            request172 = null;
            webTest.EndTransaction(WebRequestPrefix + "api_officemanagement_offices_office_1");

            webTest.BeginTransaction(WebRequestPrefix + "api_officemanagement_offices_office_2");
            WebTestRequest request173 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/officemanagement/offices/office/" + OfficeManagementID + "/accessi" +
                    "blegateways"));
            request173.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/plain, */*;version=latest"));
            request173.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request173;
            request173 = null;
            webTest.EndTransaction(WebRequestPrefix + "api_officemanagement_offices_office_2");

            webTest.BeginTransaction(WebRequestPrefix + "api_officemanagement_offices_office_3");
            WebTestRequest request174 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/officemanagement/offices/office/" + OfficeManagementID + " /reporti" +
                    "ngstructure"));
            request174.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/plain, */*;version=latest"));
            request174.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request174;
            request174 = null;
            webTest.EndTransaction(WebRequestPrefix + "api_officemanagement_offices_office_3");

            webTest.BeginTransaction(WebRequestPrefix + "api_officemanagement_declarationfrequencies_NL");
            WebTestRequest request175 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/officemanagement/declarationfrequencies/NL"));
            request175.Headers.Add(new WebTestRequestHeader("Accept", "application/vnd.twinfield+json;version=latest"));
            request175.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request175;
            request175 = null;
            webTest.EndTransaction(WebRequestPrefix + "api_officemanagement_declarationfrequencies_NL");

            webTest.BeginTransaction(WebRequestPrefix + "api_officemanagement_offices_office_4");
            WebTestRequest request176 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/officemanagement/offices/office/" + OfficeManagementID + "/banks"));
            request176.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/plain, */*;version=latest"));
            request176.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            request176.QueryStringParameters.Add("limit", "1000", false, false);
            yield return request176;
            request176 = null;
            webTest.EndTransaction(WebRequestPrefix + "api_officemanagement_offices_office_4");

            webTest.BeginTransaction(WebRequestPrefix + "api_officemanagement_offices_office_5");
            WebTestRequest request177 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/officemanagement/offices/office/" + OfficeManagementID + "/fixedas" +
                    "setaccounts"));
            request177.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/plain, */*;version=latest"));
            request177.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            request177.QueryStringParameters.Add("limit", "1000", false, false);
            yield return request177;
            request177 = null;
            webTest.EndTransaction(WebRequestPrefix + "api_officemanagement_offices_office_5");

            webTest.BeginTransaction(WebRequestPrefix + "en-GB__ui_form_view_form-field_nf-form-field.html");
            WebTestRequest request178 = new WebTestRequest((webTest.Context["TwfcndURL"].ToString() + "/" + threadData.BuildVersion + "/en-GB/_ui/form/view/form-field/nf-form-field.html"));
            request178.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/plain, */*;version=latest"));
            request178.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request178;
            request178 = null;
            webTest.EndTransaction(WebRequestPrefix + "en-GB__ui_form_view_form-field_nf-form-field.html");

            webTest.BeginTransaction(WebRequestPrefix + "api_officemanagement_accountingschemes_NL");
            WebTestRequest request179 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/officemanagement/accountingschemes/NL"));
            request179.Headers.Add(new WebTestRequestHeader("Accept", "application/vnd.twinfield+json;version=latest"));
            request179.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request179;
            request179 = null;
            webTest.EndTransaction(WebRequestPrefix + "api_officemanagement_accountingschemes_NL");

            webTest.BeginTransaction(WebRequestPrefix + "api_officemanagement_declarationfrequencies_NL_1");
            WebTestRequest request180 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/officemanagement/declarationfrequencies/NL"));
            request180.Headers.Add(new WebTestRequestHeader("Accept", "application/vnd.twinfield+json;version=latest"));
            request180.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request180;
            request180 = null;
            webTest.EndTransaction(WebRequestPrefix + "api_officemanagement_declarationfrequencies_NL_1");

            webTest.BeginTransaction(WebRequestPrefix + "api_officemanagement_isictsupported_NL");
            WebTestRequest request181 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/officemanagement/isictsupported/NL"));
            request181.Headers.Add(new WebTestRequestHeader("Accept", "application/vnd.twinfield+json;version=latest"));
            request181.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request181;
            request181 = null;
            webTest.EndTransaction(WebRequestPrefix + "api_officemanagement_isictsupported_NL");

            webTest.BeginTransaction(WebRequestPrefix + "form_fields_field-group_view_nf-field-group.html");
            WebTestRequest request182 = new WebTestRequest((webTest.Context["TwfcndURL"].ToString() + "/" + threadData.BuildVersion + "/en-GB/_ui/form/fields/field-group/view/nf-field-group.html"));
            request182.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/plain, */*;version=latest"));
            request182.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request182;
            request182 = null;
            webTest.EndTransaction(WebRequestPrefix + "form_fields_field-group_view_nf-field-group.html");

            webTest.BeginTransaction(WebRequestPrefix + "multicolumn_view_header_nf-multicolumn-h");
            WebTestRequest request183 = new WebTestRequest((webTest.Context["TwfcndURL"].ToString() + "/" + threadData.BuildVersion + "/en-GB/_ui/form/fields/field-group/multicolumn/view/header/nf-multicolumn-h" +
                    "eaders.html"));
            request183.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/plain, */*;version=latest"));
            request183.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request183;
            request183 = null;
            webTest.EndTransaction(WebRequestPrefix + "multicolumn_view_header_nf-multicolumn-h");

            webTest.BeginTransaction(WebRequestPrefix + "multicolumn_view_row_nf-multicolumn-row-");
            WebTestRequest request184 = new WebTestRequest((webTest.Context["TwfcndURL"].ToString() + "/" + threadData.BuildVersion + "/en-GB/_ui/form/fields/field-group/multicolumn/view/row/nf-multicolumn-row-" +
                    "labels.html"));
            request184.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/plain, */*;version=latest"));
            request184.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request184;
            request184 = null;
            webTest.EndTransaction(WebRequestPrefix + "multicolumn_view_row_nf-multicolumn-row-");

            webTest.BeginTransaction(WebRequestPrefix + "ui_form_fields_base_input_view_nf-input.html");
            WebTestRequest request185 = new WebTestRequest((webTest.Context["TwfcndURL"].ToString() + "/" + threadData.BuildVersion + "/en-GB/_ui/form/fields/base/input/view/nf-input.html"));
            request185.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/plain, */*;version=latest"));
            request185.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request185;
            request185 = null;
            webTest.EndTransaction(WebRequestPrefix + "ui_form_fields_base_input_view_nf-input.html");

            webTest.BeginTransaction(WebRequestPrefix + "base_static-field_view_nf-static-field.html");
            WebTestRequest request186 = new WebTestRequest((webTest.Context["TwfcndURL"].ToString() + "/" + threadData.BuildVersion + "/en-GB/_ui/form/fields/base/static-field/view/nf-static-field.html"));
            request186.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/plain, */*;version=latest"));
            request186.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request186;
            request186 = null;
            webTest.EndTransaction(WebRequestPrefix + "base_static-field_view_nf-static-field.html");

            webTest.BeginTransaction(WebRequestPrefix + "en-GB__ui_form_fields_select_view_nf-select2.html");
            WebTestRequest request187 = new WebTestRequest((webTest.Context["TwfcndURL"].ToString() + "/" + threadData.BuildVersion + "/en-GB/_ui/form/fields/select/view/nf-select2.html"));
            request187.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/plain, */*;version=latest"));
            request187.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request187;
            request187 = null;
            webTest.EndTransaction(WebRequestPrefix + "en-GB__ui_form_fields_select_view_nf-select2.html");

            webTest.BeginTransaction(WebRequestPrefix + "form_fields_base_checkbox_view_nf-checkbox.html");
            WebTestRequest request188 = new WebTestRequest((webTest.Context["TwfcndURL"].ToString() + "/" + threadData.BuildVersion + "/en-GB/_ui/form/fields/base/checkbox/view/nf-checkbox.html"));
            request188.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/plain, */*;version=latest"));
            request188.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request188;
            request188 = null;
            webTest.EndTransaction(WebRequestPrefix + "form_fields_base_checkbox_view_nf-checkbox.html");

            webTest.BeginTransaction(WebRequestPrefix + "en-GB__ui_form_actions_view_nf-field-actions.html");
            WebTestRequest request189 = new WebTestRequest((webTest.Context["TwfcndURL"].ToString() + "/" + threadData.BuildVersion + "/en-GB/_ui/form/actions/view/nf-field-actions.html"));
            request189.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/plain, */*;version=latest"));
            request189.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request189;
            request189 = null;
            webTest.EndTransaction(WebRequestPrefix + "en-GB__ui_form_actions_view_nf-field-actions.html");

            webTest.BeginTransaction(WebRequestPrefix + "select_view_nf-select2-basic-no-search.html");
            WebTestRequest request190 = new WebTestRequest((webTest.Context["TwfcndURL"].ToString() + "/" + threadData.BuildVersion + "/en-GB/_ui/form/fields/select/view/nf-select2-basic-no-search.html"));
            request190.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/plain, */*;version=latest"));
            request190.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request190;
            request190 = null;
            webTest.EndTransaction(WebRequestPrefix + "select_view_nf-select2-basic-no-search.html");

            webTest.BeginTransaction(WebRequestPrefix + "fields_select_view_nf-select2-basic-search.html");
            WebTestRequest request191 = new WebTestRequest((webTest.Context["TwfcndURL"].ToString() + "/" + threadData.BuildVersion + "/en-GB/_ui/form/fields/select/view/nf-select2-basic-search.html"));
            request191.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/plain, */*;version=latest"));
            request191.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request191;
            request191 = null;
            webTest.EndTransaction(WebRequestPrefix + "fields_select_view_nf-select2-basic-search.html");


            webTest.EndTransaction(WebBTPrefix + "CompanySettingsTab");
            #endregion

            Thread.Sleep(2000);

            #region CS_EditShortNameAndSave
            webTest.BeginTransaction(WebBTPrefix + "EditShortNameAndSave");
            WebRequestPrefix = "ESN_";

            #region Json Object Preparation for Edit and Save Company's Short name
            companies.financialInformation.defaultBankBind = new Defaultbankbind();
            companies.financialInformation.defaultBankBind.caption = companies.financialInformation.defaultBankCode + " - " + companies.financialInformation.defaultBankDesc;
            companies.financialInformation.defaultBankBind.code = companies.financialInformation.defaultBankCode;
            companies.financialInformation.defaultBankBind.description = companies.financialInformation.defaultBankBind.caption;
            companies.financialInformation.defaultBankBind.name = companies.financialInformation.defaultBankDesc;

            int i = 0;
            if (companies.fixedAssetsSettings.fixedAssetAccounts.Length > 0)
            {
                Fixedassetaccount[] fixedassetaccounts = companies.fixedAssetsSettings.fixedAssetAccounts;
                companies.fixedAssetsSettings.fixedAssetAccounts = null;

                foreach (Fixedassetaccount fixedassetaccount in fixedassetaccounts)
                {
                    fixedassetaccount.fixedAssetAccountBind = new Fixedassetaccountbind();
                    fixedassetaccount.fixedAssetAccountBind.caption = fixedassetaccount.description;
                    fixedassetaccount.fixedAssetAccountBind.code = fixedassetaccount.description.Split('-')[0].ToString().Trim();
                    fixedassetaccount.fixedAssetAccountBind.defaultVatCode = null;//need to check - AnkitaG
                    fixedassetaccount.fixedAssetAccountBind.description = fixedassetaccount.description;
                    fixedassetaccount.fixedAssetAccountBind.id = fixedassetaccount.id;
                    fixedassetaccount.fixedAssetAccountBind.isFixedVatCode = false;//need to check - AnkitaG
                    fixedassetaccount.fixedAssetAccountBind.matchable = false;//need to check - AnkitaG
                    fixedassetaccount.fixedAssetAccountBind.name = fixedassetaccount.description.Split('-')[1].ToString().Trim();
                    fixedassetaccount.fixedAssetAccountBind.subanalysis = "Allowed";
                    fixedassetaccount.fixedAssetAccountBind.substitutionAccountId = null;//need to check - AnkitaG
                    fixedassetaccount.fixedAssetAccountBind.value = fixedassetaccount.id;
                    companies.fixedAssetsSettings.fixedAssetAccounts = new Fixedassetaccount[fixedassetaccounts.Length];
                    companies.fixedAssetsSettings.fixedAssetAccounts[i] = fixedassetaccount; i++;
                }
            }

            companies.officeInformation.companyTypeDescription = companyTypeDescription;//extract - AnkitaG
            companies.officeInformation.countryName = initializationAndTranslation.countryCatalog.nl.localisedName;// commonCountry.localisedName;
            companies.officeInformation.countryBind = new Countrybind();
            companies.officeInformation.countryBind.caption = companies.officeInformation.countryName;
            companies.officeInformation.countryBind.value = companies.officeInformation.countryCode;
            companies.officeInformation.isPostalCodeCityCatalogAvailable = false;//need to check - AnkitaG
                                                                                 //if (companies.officeInformation.shortName.Contains("-prf"))
            companies.officeInformation.shortName = CommonFunctions.RandomString(15) + "-perf";//new Random().Next(0,9999).ToString()+"-perf"; //companies.officeInformation.shortName.Replace("-prf", "");//Remove(((companies.officeInformation.shortName.Length - 1) - "-prf".Length), " - perf".Length);
                                                                                               // else
                                                                                               //companies.officeInformation.shortName = companies.officeInformation.shortName + "-prf";

            //AccountsPayable
            companies.systemAccounts.accountsPayable.caption = companies.systemAccounts.accountsPayable.description;
            companies.systemAccounts.accountsPayable.invalid = false;//need to check - AnkitaG
            companies.systemAccounts.accountsPayable.value = companies.systemAccounts.accountsPayable.id;

            //AccountsReceivable
            companies.systemAccounts.accountsReceivable.caption = companies.systemAccounts.accountsReceivable.description;
            companies.systemAccounts.accountsReceivable.invalid = false;//need to check - AnkitaG
            companies.systemAccounts.accountsReceivable.value = companies.systemAccounts.accountsReceivable.id;

            //DeductionCreditAccount
            companies.systemAccounts.deductionCreditAccount.caption = companies.systemAccounts.deductionCreditAccount.description;
            companies.systemAccounts.deductionCreditAccount.invalid = false;//need to check - AnkitaG
            companies.systemAccounts.deductionCreditAccount.value = companies.systemAccounts.deductionCreditAccount.id;

            //DeductionDebitAccount
            companies.systemAccounts.deductionDebitAccount.caption = companies.systemAccounts.deductionDebitAccount.description;
            companies.systemAccounts.deductionDebitAccount.invalid = false;//need to check - AnkitaG
            companies.systemAccounts.deductionDebitAccount.value = companies.systemAccounts.deductionDebitAccount.id;

            //DefaultRevenueType
            companies.systemAccounts.defaultRevenueType.caption = companies.systemAccounts.defaultRevenueType.description;
            companies.systemAccounts.defaultRevenueType.invalid = false;//need to check - AnkitaG
            companies.systemAccounts.defaultRevenueType.value = companies.systemAccounts.defaultRevenueType.id;

            //ExchangeRateDifferencesCredit
            companies.systemAccounts.exchangeRateDifferencesCredit.caption = companies.systemAccounts.exchangeRateDifferencesCredit.description;
            companies.systemAccounts.exchangeRateDifferencesCredit.invalid = false;//need to check - AnkitaG
            companies.systemAccounts.exchangeRateDifferencesCredit.value = companies.systemAccounts.exchangeRateDifferencesCredit.id;

            //ExchangeRateDifferencesDebit
            companies.systemAccounts.exchangeRateDifferencesDebit.caption = companies.systemAccounts.exchangeRateDifferencesDebit.description;
            companies.systemAccounts.exchangeRateDifferencesDebit.invalid = false;//need to check - AnkitaG
            companies.systemAccounts.exchangeRateDifferencesDebit.value = companies.systemAccounts.exchangeRateDifferencesDebit.id;

            //FixedAssetsCostCenter
            companies.systemAccounts.fixedAssetsCostCenter.caption = companies.systemAccounts.fixedAssetsCostCenter.description;
            companies.systemAccounts.fixedAssetsCostCenter.invalid = false;//need to check - AnkitaG
            companies.systemAccounts.fixedAssetsCostCenter.value = companies.systemAccounts.fixedAssetsCostCenter.id;

            //ForeignBalancesYearEnd
            companies.systemAccounts.foreignBalancesYearEnd.caption = companies.systemAccounts.foreignBalancesYearEnd.description;
            companies.systemAccounts.foreignBalancesYearEnd.invalid = false;//need to check - AnkitaG
            companies.systemAccounts.foreignBalancesYearEnd.value = companies.systemAccounts.foreignBalancesYearEnd.id;

            //ProfitAndLossBroughtForward
            companies.systemAccounts.profitAndLossBroughtForward.caption = companies.systemAccounts.profitAndLossBroughtForward.description;
            companies.systemAccounts.profitAndLossBroughtForward.invalid = false;//need to check - AnkitaG
            companies.systemAccounts.profitAndLossBroughtForward.value = companies.systemAccounts.profitAndLossBroughtForward.id;

            //ProjectMarkup
            companies.systemAccounts.projectMarkup.caption = companies.systemAccounts.projectMarkup.description;
            companies.systemAccounts.projectMarkup.invalid = false;//need to check - AnkitaG
            companies.systemAccounts.projectMarkup.value = companies.systemAccounts.projectMarkup.id;

            //SuspenseAccount
            companies.systemAccounts.suspenseAccount.caption = companies.systemAccounts.suspenseAccount.description;
            companies.systemAccounts.suspenseAccount.invalid = false;//need to check - AnkitaG
            companies.systemAccounts.suspenseAccount.value = companies.systemAccounts.suspenseAccount.id;

            //TimeAndExpensesCostCenter
            companies.systemAccounts.timeAndExpensesCostCenter.caption = companies.systemAccounts.timeAndExpensesCostCenter.description;
            companies.systemAccounts.timeAndExpensesCostCenter.invalid = false;//need to check - AnkitaG
            companies.systemAccounts.timeAndExpensesCostCenter.value = companies.systemAccounts.timeAndExpensesCostCenter.id;

            //WorkInProgress
            companies.systemAccounts.workInProgress.caption = companies.systemAccounts.workInProgress.description;
            companies.systemAccounts.workInProgress.invalid = false;//need to check - AnkitaG
            companies.systemAccounts.workInProgress.value = companies.systemAccounts.workInProgress.id;

            //WriteOffCreditAccount
            companies.systemAccounts.writeOffCreditAccount.caption = companies.systemAccounts.writeOffCreditAccount.description;
            companies.systemAccounts.writeOffCreditAccount.invalid = false;//need to check - AnkitaG
            companies.systemAccounts.writeOffCreditAccount.value = companies.systemAccounts.writeOffCreditAccount.id;

            //WriteOffDebitAccount
            companies.systemAccounts.writeOffDebitAccount.caption = companies.systemAccounts.writeOffDebitAccount.description;
            companies.systemAccounts.writeOffDebitAccount.invalid = false;//need to check - AnkitaG
            companies.systemAccounts.writeOffDebitAccount.value = companies.systemAccounts.writeOffDebitAccount.id;

            //YearEndProfitOrLoss
            companies.systemAccounts.yearEndProfitOrLoss.caption = companies.systemAccounts.yearEndProfitOrLoss.description;
            companies.systemAccounts.yearEndProfitOrLoss.invalid = false;//need to check - AnkitaG
            companies.systemAccounts.yearEndProfitOrLoss.value = companies.systemAccounts.yearEndProfitOrLoss.id;

            companies.taxSettings.hasTaxGroup = false;//need to check - AnkitaG
            if (companies.taxSettings.taxGroupName == null && companies.taxSettings.taxGroupCode == null)
                companies.taxSettings.taxGroupCodeAndName = "Not applicable";
            else
                companies.taxSettings.taxGroupCodeAndName = companies.taxSettings.taxGroupCode + " " + companies.taxSettings.taxGroupName;

            string request193BodyString = JsonConvert.SerializeObject(companies, settings);
            #endregion


            webTest.BeginTransaction(WebRequestPrefix + "api_officemanagement_offices_office_6");
            WebTestRequest request193 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/officemanagement/offices/office/" + OfficeManagementID));
            request193.Method = "PUT";
            request193.Headers.Add(new WebTestRequestHeader("Accept", "application/vnd.twinfield+json;version=latest"));
            request193.Headers.Add(new WebTestRequestHeader("If-Match", "\"" + companies.version + "\""));
            request193.Headers.Add(new WebTestRequestHeader("Content-Type", "application/json;charset=utf-8"));
            request193.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            StringHttpBody request193Body = new StringHttpBody();
            request193Body.ContentType = "application/json;charset=utf-8";
            request193Body.InsertByteOrderMark = false;
            request193Body.BodyString = request193BodyString;
            request193.Body = request193Body;
            yield return request193;
            request193 = null;
            webTest.EndTransaction(WebRequestPrefix + "api_officemanagement_offices_office_6");

            webTest.BeginTransaction(WebRequestPrefix + "api");
            WebTestRequest request194 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/"));
            request194.Method = "OPTIONS";
            request194.Headers.Add(new WebTestRequestHeader("Accept", "application/vnd.twinfield+json;version=latest"));
            request194.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request194;
            request194 = null;
            webTest.EndTransaction(WebRequestPrefix + "api");

            webTest.BeginTransaction(WebRequestPrefix + "api_tasks_2");
            WebTestRequest request195 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/tasks"));
            request195.Headers.Add(new WebTestRequestHeader("Accept", "application/vnd.twinfield+json;version=latest"));
            request195.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request195;
            request195 = null;
            webTest.EndTransaction(WebRequestPrefix + "api_tasks_2");


            webTest.EndTransaction(WebBTPrefix + "EditShortNameAndSave");
            #endregion

            Thread.Sleep(2000);

            #region CS_GoToCompanySettingsTab
            webTest.BeginTransaction(WebBTPrefix + "GoToCompanySettingsTabAgain");
            WebRequestPrefix = "CST2_";

            webTest.BeginTransaction(WebRequestPrefix + "UI_1");
            WebTestRequest request196 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/UI/"));
            request196.ExpectedResponseUrl = (webTest.Context["AccountingURL"].ToString() + "/UI/#/Settings/Company/Settings");
            yield return request196;
            request196 = null;
            webTest.EndTransaction(WebRequestPrefix + "UI_1");

            webTest.BeginTransaction(WebRequestPrefix + "api_officemanagement");
            WebTestRequest request197 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/officemanagement"));
            request197.Method = "OPTIONS";
            request197.Headers.Add(new WebTestRequestHeader("Accept", "application/vnd.twinfield+json;version=latest"));
            request197.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request197;
            request197 = null;
            webTest.EndTransaction(WebRequestPrefix + "api_officemanagement");

            webTest.BeginTransaction(WebRequestPrefix + "api_tasks_3");
            WebTestRequest request198 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/tasks"));
            request198.Headers.Add(new WebTestRequestHeader("Accept", "application/vnd.twinfield+json;version=latest"));
            request198.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request198;
            request198 = null;
            webTest.EndTransaction(WebRequestPrefix + "api_tasks_3");

            webTest.BeginTransaction(WebRequestPrefix + "api_companies");
            WebTestRequest request199 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/companies"));
            request199.Method = "OPTIONS";
            request199.Headers.Add(new WebTestRequestHeader("Accept", "application/vnd.twinfield+json;version=latest"));
            request199.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request199;
            request199 = null;
            webTest.EndTransaction(WebRequestPrefix + "api_companies");

            webTest.BeginTransaction(WebRequestPrefix + "api_purchase_1");
            WebTestRequest request200 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/purchase"));
            request200.Method = "OPTIONS";
            request200.Headers.Add(new WebTestRequestHeader("Accept", "application/vnd.twinfield+json;version=latest"));
            request200.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request200;
            request200 = null;
            webTest.EndTransaction(WebRequestPrefix + "api_purchase_1");

            webTest.BeginTransaction(WebRequestPrefix + "api_vatmanagement_1");
            WebTestRequest request201 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/vatmanagement"));
            request201.Method = "OPTIONS";
            request201.Headers.Add(new WebTestRequestHeader("Accept", "application/vnd.twinfield+json;version=latest"));
            request201.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request201;
            request201 = null;
            webTest.EndTransaction(WebRequestPrefix + "api_vatmanagement_1");

            webTest.BeginTransaction(WebRequestPrefix + "api_officemanagement_offices_office_7");
            WebTestRequest request202 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/officemanagement/offices/office/" + OfficeManagementID));
            request202.Headers.Add(new WebTestRequestHeader("Accept", "application/vnd.twinfield+json;version=latest"));
            request202.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request202;
            request202 = null;
            webTest.EndTransaction(WebRequestPrefix + "api_officemanagement_offices_office_7");

            webTest.BeginTransaction(WebRequestPrefix + "api_officemanagement_bankaccountledgermask_1");
            WebTestRequest request203 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/officemanagement/bankaccountledgermask"));
            request203.Headers.Add(new WebTestRequestHeader("Accept", "application/vnd.twinfield+json;version=latest"));
            request203.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request203;
            request203 = null;
            webTest.EndTransaction(WebRequestPrefix + "api_officemanagement_bankaccountledgermask_1");

            webTest.BeginTransaction(WebRequestPrefix + "api_officemanagement_paymentdiscounttypes_1");
            WebTestRequest request204 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/officemanagement/paymentdiscounttypes"));
            request204.Headers.Add(new WebTestRequestHeader("Accept", "application/vnd.twinfield+json;version=latest"));
            request204.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request204;
            request204 = null;
            webTest.EndTransaction(WebRequestPrefix + "api_officemanagement_paymentdiscounttypes_1");

            webTest.BeginTransaction(WebRequestPrefix + "api_officemanagement_todolists_1");
            WebTestRequest request205 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/officemanagement/todolists"));
            request205.Headers.Add(new WebTestRequestHeader("Accept", "application/vnd.twinfield+json;version=latest"));
            request205.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request205;
            request205 = null;
            webTest.EndTransaction(WebRequestPrefix + "api_officemanagement_todolists_1");

            webTest.BeginTransaction(WebRequestPrefix + "api_officemanagement_templateoffices_1");
            WebTestRequest request206 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/officemanagement/templateoffices"));
            request206.Headers.Add(new WebTestRequestHeader("Accept", "application/vnd.twinfield+json;version=latest"));
            request206.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request206;
            request206 = null;
            webTest.EndTransaction(WebRequestPrefix + "api_officemanagement_templateoffices_1");

            webTest.BeginTransaction(WebRequestPrefix + "api_officemanagement_officegroups_1");
            WebTestRequest request207 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/officemanagement/officegroups"));
            request207.Headers.Add(new WebTestRequestHeader("Accept", "application/vnd.twinfield+json;version=latest"));
            request207.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request207;
            request207 = null;
            webTest.EndTransaction(WebRequestPrefix + "api_officemanagement_officegroups_1");

            webTest.BeginTransaction(WebRequestPrefix + "api_officemanagement_offices_office_8");
            WebTestRequest request208 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/officemanagement/offices/office/" + OfficeManagementID + " /timelin" +
                    "e"));
            request208.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/plain, */*;version=latest"));
            request208.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request208;
            request208 = null;
            webTest.EndTransaction(WebRequestPrefix + "api_officemanagement_offices_office_8");

            webTest.BeginTransaction(WebRequestPrefix + "api_officemanagement_offices_office_9");
            WebTestRequest request209 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/officemanagement/offices/office/" + OfficeManagementID + " /accessi" +
                    "blegateways"));
            request209.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/plain, */*;version=latest"));
            request209.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request209;
            request209 = null;
            webTest.EndTransaction(WebRequestPrefix + "api_officemanagement_offices_office_9");

            webTest.BeginTransaction(WebRequestPrefix + "api_officemanagement_offices_office_10");
            WebTestRequest request210 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/officemanagement/offices/office/" + OfficeManagementID + " /reporti" +
                    "ngstructure"));
            request210.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/plain, */*;version=latest"));
            request210.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request210;
            request210 = null;
            webTest.EndTransaction(WebRequestPrefix + "api_officemanagement_offices_office_10");

            webTest.BeginTransaction(WebRequestPrefix + "api_officemanagement_declarationfrequencies_NL_2");
            WebTestRequest request211 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/officemanagement/declarationfrequencies/NL"));
            request211.Headers.Add(new WebTestRequestHeader("Accept", "application/vnd.twinfield+json;version=latest"));
            request211.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request211;
            request211 = null;
            webTest.EndTransaction(WebRequestPrefix + "api_officemanagement_declarationfrequencies_NL_2");

            webTest.BeginTransaction(WebRequestPrefix + "api_officemanagement_offices_office_11");
            WebTestRequest request212 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/officemanagement/offices/office/" + OfficeManagementID + " /banks"));
            request212.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/plain, */*;version=latest"));
            request212.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            request212.QueryStringParameters.Add("limit", "1000", false, false);
            yield return request212;
            request212 = null;
            webTest.EndTransaction(WebRequestPrefix + "api_officemanagement_offices_office_11");

            webTest.BeginTransaction(WebRequestPrefix + "api_officemanagement_offices_office_12");
            WebTestRequest request213 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/officemanagement/offices/office/" + OfficeManagementID + " /fixedas" +
                    "setaccounts"));
            request213.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/plain, */*;version=latest"));
            request213.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            request213.QueryStringParameters.Add("limit", "1000", false, false);
            yield return request213;
            request213 = null;
            webTest.EndTransaction(WebRequestPrefix + "api_officemanagement_offices_office_12");

            webTest.BeginTransaction(WebRequestPrefix + "api_officemanagement_accountingschemes_NL_1");
            WebTestRequest request214 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/officemanagement/accountingschemes/NL"));
            request214.Headers.Add(new WebTestRequestHeader("Accept", "application/vnd.twinfield+json;version=latest"));
            request214.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request214;
            request214 = null;
            webTest.EndTransaction(WebRequestPrefix + "api_officemanagement_accountingschemes_NL_1");

            webTest.BeginTransaction(WebRequestPrefix + "api_officemanagement_declarationfrequencies_NL_3");
            WebTestRequest request215 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/officemanagement/declarationfrequencies/NL"));
            request215.Headers.Add(new WebTestRequestHeader("Accept", "application/vnd.twinfield+json;version=latest"));
            request215.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request215;
            request215 = null;
            webTest.EndTransaction(WebRequestPrefix + "api_officemanagement_declarationfrequencies_NL_3");

            webTest.EndTransaction(WebBTPrefix + "GoToCompanySettingsTabAgain");
            #endregion

            Thread.Sleep(2000);

            #region CS_GoToTimeLine
            webTest.BeginTransaction(WebBTPrefix + "GoToTimeLine");
            WebRequestPrefix = "TL_";

            webTest.BeginTransaction(WebRequestPrefix + "ui_form_fields_timeline_view_nf-ui-timeline.html");
            WebTestRequest request217 = new WebTestRequest((webTest.Context["TwfcndURL"].ToString() + "/" + threadData.BuildVersion + "/en-GB/_ui/form/fields/timeline/view/nf-ui-timeline.html"));
            request217.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/plain, */*;version=latest"));
            request217.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request217;
            request217 = null;
            webTest.EndTransaction(WebRequestPrefix + "ui_form_fields_timeline_view_nf-ui-timeline.html");

            webTest.BeginTransaction(WebRequestPrefix + "en-GB__ui_timeline_ui-timeline-component.html");
            WebTestRequest request218 = new WebTestRequest((webTest.Context["TwfcndURL"].ToString() + "/" + threadData.BuildVersion + "/en-GB/_ui/timeline/ui-timeline-component.html"));
            request218.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/plain, */*;version=latest"));
            request218.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request218;
            request218 = null;
            webTest.EndTransaction(WebRequestPrefix + "en-GB__ui_timeline_ui-timeline-component.html");

            webTest.BeginTransaction(WebRequestPrefix + "ui_timeline_internal_ui-timeline-pagination.html");
            WebTestRequest request219 = new WebTestRequest((webTest.Context["TwfcndURL"].ToString() + "/" + threadData.BuildVersion + "/en-GB/_ui/timeline/internal/ui-timeline-pagination.html"));
            request219.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/plain, */*;version=latest"));
            request219.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request219;
            request219 = null;
            webTest.EndTransaction(WebRequestPrefix + "ui_timeline_internal_ui-timeline-pagination.html");

            webTest.BeginTransaction(WebRequestPrefix + "ui_timeline_events_ui-timeline-basic-event.html");
            WebTestRequest request220 = new WebTestRequest((webTest.Context["TwfcndURL"].ToString() + "/" + threadData.BuildVersion + "/en-GB/_ui/timeline/events/ui-timeline-basic-event.html"));
            request220.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/plain, */*;version=latest"));
            request220.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request220;
            request220 = null;
            webTest.EndTransaction(WebRequestPrefix + "ui_timeline_events_ui-timeline-basic-event.html");

            webTest.EndTransaction(WebBTPrefix + "GoToTimeLine");
            #endregion
            
            Thread.Sleep(2000);

            if ((Convert.ToInt32(webTest.Context["iterationNo"])% Convert.ToInt32(webTest.Context["maxiterationNo"])) ==0)
            {
                foreach (var request in webTest.Logout(threadData, objPlugin)) yield return request;
                //RTMonitor.Write(Color.Green, "User Logout: " + threadData.UserName + " LogOutTime: " + DateTime.Now + "\r\n");
                Thread.Sleep(2000);
            }
        }
        
    }
    public class CompanySettings_A : WebTest
    {
        CompanySettings _CompanySettings = null;
        WebTestRequestPlugin objPlugin = new WebTestRequestPlugin();
        private WebTestContext _textContext;
        public CompanySettings_A()
        {
            if (_CompanySettings == null)
                _CompanySettings = new CompanySettings(this);


            this.Context.Add("LoginMain", AssemblyLoad.LoginMain);
            this.Context.Add("AccountingURL", AssemblyLoad.AccountingURL);
            this.Context.Add("TwfcndURL", AssemblyLoad.TwfcndURL);
            this.PreAuthenticate = true;
            this.Proxy = "default";
            this.StopOnError = true;
            _textContext = this.Context;

            this.PreWebTest += TwinfieldWebLoadTestPlugin.PreWebTestEvent;
            this.PreRequest += objPlugin.Test_PreRequest;
            this.PostRequest += objPlugin.Test_PostRequest;
        }

        public override IEnumerator<WebTestRequest> GetRequestEnumerator()
        {
            _textContext= this._textContext;
            return _CompanySettings.GetRequestEnumerator(TwinfieldDBTenant.A, Context.WebTestUserId.ToString(), objPlugin);
        }
    }

    public class CompanySettings_B : WebTest
    {
        CompanySettings _CompanySettings = null;
        WebTestRequestPlugin objPlugin = new WebTestRequestPlugin();
        private WebTestContext _textContext;
        public CompanySettings_B()
        {
            if (_CompanySettings == null)
                _CompanySettings = new CompanySettings(this);


            this.Context.Add("LoginMain", AssemblyLoad.LoginMain);
            this.Context.Add("AccountingURL", AssemblyLoad.AccountingURL);
            this.Context.Add("TwfcndURL", AssemblyLoad.TwfcndURL);
            this.PreAuthenticate = true;
            this.Proxy = "default";
            this.StopOnError = true;
            _textContext = this.Context;

            this.PreWebTest += TwinfieldWebLoadTestPlugin.PreWebTestEvent;
            this.PreRequest += objPlugin.Test_PreRequest;
            this.PostRequest += objPlugin.Test_PostRequest;
        }

        public override IEnumerator<WebTestRequest> GetRequestEnumerator()
        {
            _textContext = this._textContext;
            return _CompanySettings.GetRequestEnumerator(TwinfieldDBTenant.B, Context.WebTestUserId.ToString(), objPlugin);
        }
    }

    public class CompanySettings_C : WebTest
    {
        CompanySettings _CompanySettings = null;
        WebTestRequestPlugin objPlugin = new WebTestRequestPlugin();
        private WebTestContext _textContext;
        public CompanySettings_C()
        {
            if (_CompanySettings == null)
                _CompanySettings = new CompanySettings(this);


            this.Context.Add("LoginMain", AssemblyLoad.LoginMain);
            this.Context.Add("AccountingURL", AssemblyLoad.AccountingURL);
            this.Context.Add("TwfcndURL", AssemblyLoad.TwfcndURL);
            this.PreAuthenticate = true;
            this.Proxy = "default";
            this.StopOnError = true;
            _textContext = this.Context;

            this.PreWebTest += TwinfieldWebLoadTestPlugin.PreWebTestEvent;
            this.PreRequest += objPlugin.Test_PreRequest;
            this.PostRequest += objPlugin.Test_PostRequest;
        }

        public override IEnumerator<WebTestRequest> GetRequestEnumerator()
        {
            _textContext = this._textContext;
            return _CompanySettings.GetRequestEnumerator(TwinfieldDBTenant.C, Context.WebTestUserId.ToString(), objPlugin);
        }
    }

    public class CompanySettings_D : WebTest
    {
        CompanySettings _CompanySettings = null;
        WebTestRequestPlugin objPlugin = new WebTestRequestPlugin();
        private WebTestContext _textContext;
        public CompanySettings_D()
        {
            if (_CompanySettings == null)
                _CompanySettings = new CompanySettings(this);


            this.Context.Add("LoginMain", AssemblyLoad.LoginMain);
            this.Context.Add("AccountingURL", AssemblyLoad.AccountingURL);
            this.Context.Add("TwfcndURL", AssemblyLoad.TwfcndURL);
            this.PreAuthenticate = true;
            this.Proxy = "default";
            this.StopOnError = true;
            _textContext = this.Context;

            this.PreWebTest += TwinfieldWebLoadTestPlugin.PreWebTestEvent;
            this.PreRequest += objPlugin.Test_PreRequest;
            this.PostRequest += objPlugin.Test_PostRequest;
        }

        public override IEnumerator<WebTestRequest> GetRequestEnumerator()
        {
            _textContext = this._textContext;
            return _CompanySettings.GetRequestEnumerator(TwinfieldDBTenant.D, Context.WebTestUserId.ToString(), objPlugin);
        }
    }

    public class CompanySettings_E : WebTest
    {
        CompanySettings _CompanySettings = null;
        WebTestRequestPlugin objPlugin = new WebTestRequestPlugin();
        private WebTestContext _textContext;
        public CompanySettings_E()
        {
            if (_CompanySettings == null)
                _CompanySettings = new CompanySettings(this);


            this.Context.Add("LoginMain", AssemblyLoad.LoginMain);
            this.Context.Add("AccountingURL", AssemblyLoad.AccountingURL);
            this.Context.Add("TwfcndURL", AssemblyLoad.TwfcndURL);
            this.PreAuthenticate = true;
            this.Proxy = "default";
            this.StopOnError = true;
            _textContext = this.Context;

            this.PreWebTest += TwinfieldWebLoadTestPlugin.PreWebTestEvent;
            this.PreRequest += objPlugin.Test_PreRequest;
            this.PostRequest += objPlugin.Test_PostRequest;
        }

        public override IEnumerator<WebTestRequest> GetRequestEnumerator()
        {
            _textContext = this._textContext;
            return _CompanySettings.GetRequestEnumerator(TwinfieldDBTenant.E, Context.WebTestUserId.ToString(), objPlugin);
        }
    }
}
