//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Twinfield_NewFramework
{
    using System;
    using System.Collections.Generic;
    using System.Text;
    using Microsoft.VisualStudio.TestTools.WebTesting;
    using Microsoft.VisualStudio.TestTools.WebTesting.Rules;
    using Newtonsoft.Json;
    using Microsoft.VisualStudio.TestTools.LoadTesting;
    //using MicrosoftServicesTestLabs.Monitor.VSTSUnitTest;
    using System.Drawing;
    using System.Threading;
    using System.Data;
    using System.Reflection;
    using System.Linq;

    public class DocumentManagement
    {
        WebTest webTest;
        private Dictionary<string, string> localDictionary;
        WebTestRequestPlugin objPlugin = new WebTestRequestPlugin();    //object of webTesRequestPlugin class to access the variables uniquely in each thread.
        private InputTableRecord testRecord;
        public Object assemblyinitializeLock = new Object();
        private WebTestContext _textContext;
        private object virtualuserId;
        private object doLogin;
        string OfficeManagementID = string.Empty;
        private string companyTypeDescription;

        public DocumentManagement(WebTest webTest)
        {
            this.webTest = webTest;
            
        }
        public WebTestContext TestContext
        {
            get { return _textContext; }

            set { _textContext = value; }
        }
        
        public IEnumerator<WebTestRequest> GetRequestEnumerator(TwinfieldDBTenant DBTenant,string userDictionaryKey, WebTestRequestPlugin objPlugin)
        {
            var WebBTPrefix = TwinfieldScenarioPrefix.DM_ + DBTenant.ToString() + "_";
            _textContext = webTest.Context;
            _textContext.TryGetValue("doLogin", out doLogin);
            _textContext.TryGetValue("UserId", out virtualuserId);

            SharedThreadData threadData;

            #region DoLogin
            if (Convert.ToBoolean(doLogin))
            {
                webTest.Context.CookieContainer = new System.Net.CookieContainer();

                try
                {
                    localDictionary = CustomDS.Instance.GetNextRowTwinfield(DBTenant, TwinfieldScenarioName.DocumentManagement);
                    
                    threadData = new SharedThreadData(Convert.ToInt32(virtualuserId),this.TestContext);
                    threadData.UserName = localDictionary["UserName"];
                    threadData.Tenant = localDictionary["DBTenant"];
                    threadData.CustomerName = localDictionary["CustomerName"];
                    threadData.hasFullAccess = localDictionary["hasFullAccess"];
                    threadData.Password = AssemblyLoad.Password;
                    threadData.ScenarioPrefix = WebBTPrefix;
                    CustomDS.Instance.Save_DocumentManagement_UserData(Convert.ToInt32(virtualuserId), threadData, DBTenant);
                    Logger.WriteGeneralLogUser(TwinfieldScenarioName.DocumentManagement + " : " + DBTenant + " : LoggedIn : " + virtualuserId); 
                }
                catch (Exception ex)
                {

                    Logger.WriteGeneralLog("Input Data not fetched for:" + TwinfieldScenarioName.DocumentManagement);
                    throw new Exception("Error in reading data for " + TwinfieldScenarioName.DocumentManagement + " : " + ex.Message);

                }
                if(threadData.hasFullAccess=="0")
                {
                    foreach (var request in webTest.LaunchLogin(threadData, objPlugin)) yield return request;
                }
                else
                {
                    foreach (var request in webTest.LaunchLogin_FullAccess(threadData, objPlugin)) yield return request;
                }
                //RTMonitor.Write(Color.Green, "Create Invoice Login User: " + threadData.UserName + "with iteration no :" + threadData.iterationCount + " LoginTime: " + DateTime.Now + "\r\n");
                CustomDS.Instance.Save_DocumentManagement_UserData(Convert.ToInt32(virtualuserId), threadData, DBTenant);
                //Logger.WriteGeneralLog("Create Invoice : Vuser - " + Convert.ToInt32(virtualuserId).ToString() + " Logged In");
            }
            else
            {
                try
                {
                    threadData = CustomDS.Instance.Get_DocumentManagement_UserData(Convert.ToInt32(virtualuserId), DBTenant);
                    Logger.WriteGeneralLogUser(TwinfieldScenarioName.DocumentManagement + " : " + DBTenant + " : NotLoggedIn : " + virtualuserId);

                }
                catch (Exception ex)
                {

                    Logger.WriteGeneralLog("Input Data not saved for :" + TwinfieldScenarioName.DocumentManagement);
                    throw new Exception("Error in getting data for " + TwinfieldScenarioName.DocumentManagement + " : " + ex.Message);

                }
            }
            #endregion DoLogin

            OfficeManagementID = threadData._textContext["OfficeMgtID"].ToString();
            WebBTPrefix = threadData.ScenarioPrefix;
            string WebRequestPrefix = "";
            
            Thread.Sleep(2000);

            #region DM_GoToVAT
            webTest.BeginTransaction(WebBTPrefix + "GoToVAT");
            WebRequestPrefix = "GTV_";

            webTest.BeginTransaction(WebRequestPrefix + "UI");
            WebTestRequest request181 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/UI/"));
            request181.ExpectedResponseUrl = (webTest.Context["AccountingURL"].ToString() + "/UI/#/Tax");
            yield return request181;
            request181 = null;
            webTest.EndTransaction(WebRequestPrefix + "UI");

            webTest.BeginTransaction(WebRequestPrefix + "en-GB_tax_tax.html");
            WebTestRequest request182 = new WebTestRequest((webTest.Context["TwfcndURL"].ToString() + "/" + threadData.BuildVersion + "/en-GB/tax/tax.html"));
            request182.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/plain, */*;version=latest"));
            request182.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request182;
            request182 = null;
            webTest.EndTransaction(WebRequestPrefix + "en-GB_tax_tax.html");

            webTest.BeginTransaction(WebRequestPrefix + "framework_desktop_view_cr-basic-group-tile.html");
            WebTestRequest request183 = new WebTestRequest((webTest.Context["TwfcndURL"].ToString() + "/" + threadData.BuildVersion + "/en-GB/_components/framework/desktop/view/cr-basic-group-tile.html"));
            request183.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/plain, */*;version=latest"));
            request183.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request183;
            request183 = null;
            webTest.EndTransaction(WebRequestPrefix + "framework_desktop_view_cr-basic-group-tile.html");

            webTest.BeginTransaction(WebRequestPrefix + "desktop_view_cr-dashboard-sub-section-tile.htm");
            WebTestRequest request184 = new WebTestRequest((webTest.Context["TwfcndURL"].ToString() + "/" + threadData.BuildVersion + "/en-GB/_components/framework/desktop/view/cr-dashboard-sub-section-tile.htm" +
                    "l"));
            request184.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/plain, */*;version=latest"));
            request184.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request184;
            request184 = null;
            webTest.EndTransaction(WebRequestPrefix + "desktop_view_cr-dashboard-sub-section-tile.htm");

            webTest.BeginTransaction(WebRequestPrefix + "framework_desktop_view_cr-links-tile.html");
            WebTestRequest request185 = new WebTestRequest((webTest.Context["TwfcndURL"].ToString() + "/" + threadData.BuildVersion + "/en-GB/_components/framework/desktop/view/cr-links-tile.html"));
            request185.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/plain, */*;version=latest"));
            request185.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request185;
            request185 = null;
            webTest.EndTransaction(WebRequestPrefix + "framework_desktop_view_cr-links-tile.html");

            webTest.BeginTransaction(WebRequestPrefix + "api_tasks_1");
            WebTestRequest request186 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/tasks"));
            request186.Headers.Add(new WebTestRequestHeader("Accept", "application/vnd.twinfield+json;version=latest"));
            request186.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request186;
            request186 = null;
            webTest.EndTransaction(WebRequestPrefix + "api_tasks_1");


            webTest.EndTransaction(WebBTPrefix + "GoToVAT");
            #endregion

            Thread.Sleep(2000);

            #region DM_GoToDocumentManagement
            webTest.BeginTransaction(WebBTPrefix + "GoToDocumentManagement");
            WebRequestPrefix = "GTDM_";

            webTest.BeginTransaction(WebRequestPrefix + "en-GB_home_classic_classic.html");
            WebTestRequest request188 = new WebTestRequest((webTest.Context["TwfcndURL"].ToString() + "/" + threadData.BuildVersion + "/en-GB/home/classic/classic.html"));
            request188.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/plain, */*;version=latest"));
            request188.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request188;
            request188 = null;
            webTest.EndTransaction(WebRequestPrefix + "en-GB_home_classic_classic.html");

            webTest.BeginTransaction(WebRequestPrefix + "documentmanagement_default.aspx");
            WebTestRequest request189 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/documentmanagement/default.aspx"));
            request189.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            ExtractHiddenFields extractionRule3 = new ExtractHiddenFields();
            extractionRule3.Required = true;
            extractionRule3.HtmlDecode = true;
            extractionRule3.ContextParameterName = "1";
            request189.ExtractValues += new EventHandler<ExtractionEventArgs>(extractionRule3.Extract);
            ExtractText extraction29 = new ExtractText();
            extraction29.StartsWith = "<INPUT TYPE=\"hidden\" NAME=\"hdnfilters\" ID=\"hdnfilters\" VALUE=\"";
            extraction29.EndsWith = "\">";
            extraction29.IgnoreCase = false;
            extraction29.UseRegularExpression = false;
            extraction29.Required = true;
            extraction29.ExtractRandomMatch = false;
            extraction29.Index = 0;
            extraction29.HtmlDecode = true;
            extraction29.SearchInHeaders = false;
            extraction29.ContextParameterName = "cor_hdnfilters";
            request189.ExtractValues += new EventHandler<ExtractionEventArgs>(extraction29.Extract);
            ExtractText extraction30 = new ExtractText();
            extraction30.StartsWith = "<INPUT TYPE=\"hidden\" NAME=\"hdnfilters\" ID=\"hdnfilters\" VALUE=\"";
            extraction30.EndsWith = "\">";
            extraction30.IgnoreCase = false;
            extraction30.UseRegularExpression = false;
            extraction30.Required = true;
            extraction30.ExtractRandomMatch = false;
            extraction30.Index = 0;
            extraction30.HtmlDecode = true;
            extraction30.SearchInHeaders = false;
            extraction30.ContextParameterName = "cor_hdnDocument";
            request189.ExtractValues += new EventHandler<ExtractionEventArgs>(extraction30.Extract);
            ExtractText extraction31 = new ExtractText();
            extraction31.StartsWith = "<INPUT TYPE=\"hidden\" NAME=\"hdnfilters\" ID=\"hdnfilters\" VALUE=\"";
            extraction31.EndsWith = "\">";
            extraction31.IgnoreCase = false;
            extraction31.UseRegularExpression = false;
            extraction31.Required = true;
            extraction31.ExtractRandomMatch = false;
            extraction31.Index = 0;
            extraction31.HtmlDecode = true;
            extraction31.SearchInHeaders = false;
            extraction31.ContextParameterName = "cor_hdnDocuments";
            request189.ExtractValues += new EventHandler<ExtractionEventArgs>(extraction31.Extract);
            ExtractText extraction32 = new ExtractText();
            extraction32.StartsWith = "<INPUT TYPE=\"hidden\" NAME=\"hdnfilters\" ID=\"hdnfilters\" VALUE=\"";
            extraction32.EndsWith = "\">";
            extraction32.IgnoreCase = false;
            extraction32.UseRegularExpression = false;
            extraction32.Required = true;
            extraction32.ExtractRandomMatch = false;
            extraction32.Index = 0;
            extraction32.HtmlDecode = true;
            extraction32.SearchInHeaders = false;
            extraction32.ContextParameterName = "cor_hdnUpdatedTransitions";
            request189.ExtractValues += new EventHandler<ExtractionEventArgs>(extraction32.Extract);
            yield return request189;
            request189 = null;
            webTest.EndTransaction(WebRequestPrefix + "documentmanagement_default.aspx");

            webTest.BeginTransaction(WebRequestPrefix + "api_tasks_2");
            WebTestRequest request190 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/tasks"));
            request190.Headers.Add(new WebTestRequestHeader("Accept", "application/vnd.twinfield+json;version=latest"));
            request190.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request190;
            request190 = null;
            webTest.EndTransaction(WebRequestPrefix + "api_tasks_2");


            webTest.EndTransaction(WebBTPrefix + "GoToDocumentManagement");
            #endregion

            Thread.Sleep(2000);

            #region DM_ClickResetFilters
            webTest.BeginTransaction(WebBTPrefix + "ClickResetFilters");
            WebRequestPrefix = "CRF_";

            webTest.BeginTransaction(WebRequestPrefix + "documentmanagement_default.aspx_1");
            WebTestRequest request192 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/documentmanagement/default.aspx"));
            request192.Method = "POST";
            FormPostHttpBody request192Body = new FormPostHttpBody();
            request192Body.FormPostParameters.Add("hdnSelectedDocuments", "[]");
            request192Body.FormPostParameters.Add("hdnfilters", webTest.Context["cor_hdnfilters"].ToString());
            request192Body.FormPostParameters.Add("hdnDocument", webTest.Context["cor_hdnDocument"].ToString());
            request192Body.FormPostParameters.Add("hdnDocuments", webTest.Context["cor_hdnDocuments"].ToString());
            request192Body.FormPostParameters.Add("hdnUpdatedTransitions", webTest.Context["cor_hdnUpdatedTransitions"].ToString());
            request192.Body = request192Body;
            //WebTestRequest request192Dependent1 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/documentmanagement/default.aspx"));
            //request192Dependent1.Method = "POST";
            //request192Dependent1.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/documentmanagement/default.aspx")));
            //FormPostHttpBody request192Dependent1Body = new FormPostHttpBody();
            //request192Dependent1Body.FormPostParameters.Add("hdnSelectedDocuments", "[]");
            //request192Dependent1Body.FormPostParameters.Add("hdnfilters", webTest.Context["$HIDDEN1.hdnfilters"].ToString());
            //request192Dependent1Body.FormPostParameters.Add("hdnDocument", webTest.Context["$HIDDEN1.hdnDocument"].ToString());
            //request192Dependent1Body.FormPostParameters.Add("hdnDocuments", webTest.Context["$HIDDEN1.hdnDocuments"].ToString());
            //request192Dependent1Body.FormPostParameters.Add("hdnUpdatedTransitions", webTest.Context["$HIDDEN1.hdnUpdatedTransitions"].ToString());
            //request192Dependent1.Body = request192Dependent1Body;
            //request192.DependentRequests.Add(request192Dependent1);
            ExtractText extraction2 = new ExtractText();
            extraction2.StartsWith = "{\"sSearch\":\"";
            extraction2.EndsWith = "\"},\"oLanguage\"";
            extraction2.IgnoreCase = false;
            extraction2.UseRegularExpression = false;
            extraction2.Required = true;
            extraction2.ExtractRandomMatch = false;
            extraction2.Index = 0;
            extraction2.HtmlDecode = true;
            extraction2.SearchInHeaders = false;
            extraction2.ContextParameterName = "cor_sSearch";
            request192.ExtractValues += new EventHandler<ExtractionEventArgs>(extraction2.Extract);
            ExtractText extraction23 = new ExtractText();
            extraction23.StartsWith = "'; availableTransitions = ";
            extraction23.EndsWith = ";";
            extraction23.IgnoreCase = false;
            extraction23.UseRegularExpression = false;
            extraction23.Required = true;
            extraction23.ExtractRandomMatch = false;
            extraction23.Index = 0;
            extraction23.HtmlDecode = true;
            extraction23.SearchInHeaders = false;
            extraction23.ContextParameterName = "cor_AVLTransitions";
            request192.ExtractValues += new EventHandler<ExtractionEventArgs>(extraction23.Extract);
            yield return request192;
            request192 = null;
            webTest.EndTransaction(WebRequestPrefix + "documentmanagement_default.aspx_1");

            webTest.EndTransaction(WebBTPrefix + "ClickResetFilters");
            #endregion

            Thread.Sleep(2000);
            
            #region DM_ClickCheckStatus01
            webTest.BeginTransaction(WebBTPrefix + "ClickCheckStatus01");
            WebRequestPrefix = "CCS1_";

            webTest.BeginTransaction(WebRequestPrefix + "documentmanagement_documentsdata.aspx");
            WebTestRequest request194 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/documentmanagement/documentsdata.aspx"));
            request194.Method = "POST";
            request194.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/documentmanagement/default.aspx")));
            FormPostHttpBody request194Body = new FormPostHttpBody();
            request194Body.FormPostParameters.Add("requestType", "checkStatus");
            request194.Body = request194Body;
            yield return request194;
            request194 = null;
            webTest.EndTransaction(WebRequestPrefix + "documentmanagement_documentsdata.aspx");


            webTest.EndTransaction(WebBTPrefix + "ClickCheckStatus01");
            #endregion

            Thread.Sleep(2000);
            
            string str = webTest.Context["cor_sSearch"].ToString().Replace("\\\"", "\"");
            List<Class1> ssearchobject = JsonConvert.DeserializeObject<List<Class1>>(str);

            ssearchobject.Where(w => w.name == "year").Select(w => w.options.Random()._checked = true).ToList();

            string sSearchBodyString = JsonConvert.SerializeObject(ssearchobject);
            sSearchBodyString = sSearchBodyString.Replace("_checked", "checked");

            #region DM_AddFilter
            webTest.BeginTransaction(WebBTPrefix + "AddFilter");
            WebRequestPrefix = "AF_";

            webTest.BeginTransaction(WebRequestPrefix + "documentmanagement_documentsdata.aspx_1");
            WebTestRequest request196 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/documentmanagement/documentsdata.aspx"));
            request196.Method = "POST";
            request196.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/javascript, */*; q=0.01"));
            request196.Headers.Add(new WebTestRequestHeader("X-Requested-With", "XMLHttpRequest"));
            request196.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/documentmanagement/default.aspx")));
            FormPostHttpBody request196Body = new FormPostHttpBody();
            request196Body.FormPostParameters.Add("sEcho", "2");
            request196Body.FormPostParameters.Add("iColumns", "14");
            request196Body.FormPostParameters.Add("sColumns", "checkbox,delete,name,type,office,period,status,assignee,actions,id,workflowId,transitions,extrainfo,exclamation");
            request196Body.FormPostParameters.Add("iDisplayStart", "0");
            request196Body.FormPostParameters.Add("iDisplayLength", "100");
            request196Body.FormPostParameters.Add("mDataProp_0", "0");
            request196Body.FormPostParameters.Add("mDataProp_1", "1");
            request196Body.FormPostParameters.Add("mDataProp_2", "2");
            request196Body.FormPostParameters.Add("mDataProp_3", "3");
            request196Body.FormPostParameters.Add("mDataProp_4", "4");
            request196Body.FormPostParameters.Add("mDataProp_5", "5");
            request196Body.FormPostParameters.Add("mDataProp_6", "6");
            request196Body.FormPostParameters.Add("mDataProp_7", "7");
            request196Body.FormPostParameters.Add("mDataProp_8", "8");
            request196Body.FormPostParameters.Add("mDataProp_9", "9");
            request196Body.FormPostParameters.Add("mDataProp_10", "10");
            request196Body.FormPostParameters.Add("mDataProp_11", "11");
            request196Body.FormPostParameters.Add("mDataProp_12", "12");
            request196Body.FormPostParameters.Add("mDataProp_13", "13");
            request196Body.FormPostParameters.Add("sSearch", sSearchBodyString, true);// webTest.Context["cor_sSearch"].ToString(),true);
            request196Body.FormPostParameters.Add("bRegex", "false");
            request196Body.FormPostParameters.Add("sSearch_0", "");
            request196Body.FormPostParameters.Add("bRegex_0", "false");
            request196Body.FormPostParameters.Add("bSearchable_0", "true");
            request196Body.FormPostParameters.Add("sSearch_1", "");
            request196Body.FormPostParameters.Add("bRegex_1", "false");
            request196Body.FormPostParameters.Add("bSearchable_1", "true");
            request196Body.FormPostParameters.Add("sSearch_2", "");
            request196Body.FormPostParameters.Add("bRegex_2", "false");
            request196Body.FormPostParameters.Add("bSearchable_2", "true");
            request196Body.FormPostParameters.Add("sSearch_3", "");
            request196Body.FormPostParameters.Add("bRegex_3", "false");
            request196Body.FormPostParameters.Add("bSearchable_3", "true");
            request196Body.FormPostParameters.Add("sSearch_4", "");
            request196Body.FormPostParameters.Add("bRegex_4", "false");
            request196Body.FormPostParameters.Add("bSearchable_4", "true");
            request196Body.FormPostParameters.Add("sSearch_5", "");
            request196Body.FormPostParameters.Add("bRegex_5", "false");
            request196Body.FormPostParameters.Add("bSearchable_5", "true");
            request196Body.FormPostParameters.Add("sSearch_6", "");
            request196Body.FormPostParameters.Add("bRegex_6", "false");
            request196Body.FormPostParameters.Add("bSearchable_6", "true");
            request196Body.FormPostParameters.Add("sSearch_7", "");
            request196Body.FormPostParameters.Add("bRegex_7", "false");
            request196Body.FormPostParameters.Add("bSearchable_7", "true");
            request196Body.FormPostParameters.Add("sSearch_8", "");
            request196Body.FormPostParameters.Add("bRegex_8", "false");
            request196Body.FormPostParameters.Add("bSearchable_8", "true");
            request196Body.FormPostParameters.Add("sSearch_9", "");
            request196Body.FormPostParameters.Add("bRegex_9", "false");
            request196Body.FormPostParameters.Add("bSearchable_9", "true");
            request196Body.FormPostParameters.Add("sSearch_10", "");
            request196Body.FormPostParameters.Add("bRegex_10", "false");
            request196Body.FormPostParameters.Add("bSearchable_10", "true");
            request196Body.FormPostParameters.Add("sSearch_11", "");
            request196Body.FormPostParameters.Add("bRegex_11", "false");
            request196Body.FormPostParameters.Add("bSearchable_11", "true");
            request196Body.FormPostParameters.Add("sSearch_12", "");
            request196Body.FormPostParameters.Add("bRegex_12", "false");
            request196Body.FormPostParameters.Add("bSearchable_12", "true");
            request196Body.FormPostParameters.Add("sSearch_13", "");
            request196Body.FormPostParameters.Add("bRegex_13", "false");
            request196Body.FormPostParameters.Add("bSearchable_13", "true");
            request196Body.FormPostParameters.Add("iSortingCols", "0");
            request196Body.FormPostParameters.Add("bSortable_0", "false");
            request196Body.FormPostParameters.Add("bSortable_1", "false");
            request196Body.FormPostParameters.Add("bSortable_2", "false");
            request196Body.FormPostParameters.Add("bSortable_3", "true");
            request196Body.FormPostParameters.Add("bSortable_4", "true");
            request196Body.FormPostParameters.Add("bSortable_5", "true");
            request196Body.FormPostParameters.Add("bSortable_6", "true");
            request196Body.FormPostParameters.Add("bSortable_7", "true");
            request196Body.FormPostParameters.Add("bSortable_8", "false");
            request196Body.FormPostParameters.Add("bSortable_9", "false");
            request196Body.FormPostParameters.Add("bSortable_10", "false");
            request196Body.FormPostParameters.Add("bSortable_11", "false");
            request196Body.FormPostParameters.Add("bSortable_12", "false");
            request196Body.FormPostParameters.Add("bSortable_13", "false");
            request196Body.FormPostParameters.Add("filterChanged", "year");
            request196Body.FormPostParameters.Add("pageCulture", "en-GB");
            request196Body.FormPostParameters.Add("selectedDocumentIds", "[]");
            request196Body.FormPostParameters.Add("availableTransitions", webTest.Context["cor_AVLTransitions"].ToString());
            request196.Body = request196Body;
            yield return request196;
            request196 = null;
            webTest.EndTransaction(WebRequestPrefix + "documentmanagement_documentsdata.aspx_1");

            webTest.EndTransaction(WebBTPrefix + "AddFilter");
            #endregion

            Thread.Sleep(2000);

            #region DM_ClickCheckStatus02
            webTest.BeginTransaction(WebBTPrefix + "ClickCheckStatus02");
            WebRequestPrefix = "CCS2_";

            webTest.BeginTransaction(WebRequestPrefix + "documentmanagement_documentsdata.aspx_2");
            WebTestRequest request197 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/documentmanagement/documentsdata.aspx"));
            request197.Method = "POST";
            request197.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/documentmanagement/default.aspx")));
            FormPostHttpBody request197Body = new FormPostHttpBody();
            request197Body.FormPostParameters.Add("requestType", "checkStatus");
            request197.Body = request197Body;
            yield return request197;
            request197 = null;
            webTest.EndTransaction(WebRequestPrefix + "documentmanagement_documentsdata.aspx_2");

            webTest.EndTransaction(WebBTPrefix + "ClickCheckStatus02");
            #endregion

            Thread.Sleep(2000);
            
            if ((Convert.ToInt32(webTest.Context["iterationNo"])% Convert.ToInt32(webTest.Context["maxiterationNo"])) ==0)
            {
                foreach (var request in webTest.Logout(threadData, objPlugin)) yield return request;
                //RTMonitor.Write(Color.Green, "User Logout: " + threadData.UserName + " LogOutTime: " + DateTime.Now + "\r\n");
                Thread.Sleep(2000);
            }
        }
        
    }
    public class DocumentManagement_A : WebTest
    {
        DocumentManagement _DocumentManagement = null;
        WebTestRequestPlugin objPlugin = new WebTestRequestPlugin();
        private WebTestContext _textContext;
        public DocumentManagement_A()
        {
            if (_DocumentManagement == null)
                _DocumentManagement = new DocumentManagement(this);


            this.Context.Add("LoginMain", AssemblyLoad.LoginMain);
            this.Context.Add("AccountingURL", AssemblyLoad.AccountingURL);
            this.Context.Add("TwfcndURL", AssemblyLoad.TwfcndURL);
            this.PreAuthenticate = true;
            this.Proxy = "default";
            this.StopOnError = true;
            _textContext = this.Context;

            this.PreWebTest += TwinfieldWebLoadTestPlugin.PreWebTestEvent;
            this.PreRequest += objPlugin.Test_PreRequest;
            this.PostRequest += objPlugin.Test_PostRequest;
        }

        public override IEnumerator<WebTestRequest> GetRequestEnumerator()
        {
            _textContext= this._textContext;
            return _DocumentManagement.GetRequestEnumerator(TwinfieldDBTenant.A, Context.WebTestUserId.ToString(), objPlugin);
        }
    }

    public class DocumentManagement_B : WebTest
    {
        DocumentManagement _DocumentManagement = null;
        WebTestRequestPlugin objPlugin = new WebTestRequestPlugin();
        private WebTestContext _textContext;
        public DocumentManagement_B()
        {
            if (_DocumentManagement == null)
                _DocumentManagement = new DocumentManagement(this);


            this.Context.Add("LoginMain", AssemblyLoad.LoginMain);
            this.Context.Add("AccountingURL", AssemblyLoad.AccountingURL);
            this.Context.Add("TwfcndURL", AssemblyLoad.TwfcndURL);
            this.PreAuthenticate = true;
            this.Proxy = "default";
            this.StopOnError = true;
            _textContext = this.Context;

            this.PreWebTest += TwinfieldWebLoadTestPlugin.PreWebTestEvent;
            this.PreRequest += objPlugin.Test_PreRequest;
            this.PostRequest += objPlugin.Test_PostRequest;
        }

        public override IEnumerator<WebTestRequest> GetRequestEnumerator()
        {
            _textContext = this._textContext;
            return _DocumentManagement.GetRequestEnumerator(TwinfieldDBTenant.B, Context.WebTestUserId.ToString(), objPlugin);
        }
    }

    public class DocumentManagement_C : WebTest
    {
        DocumentManagement _DocumentManagement = null;
        WebTestRequestPlugin objPlugin = new WebTestRequestPlugin();
        private WebTestContext _textContext;
        public DocumentManagement_C()
        {
            if (_DocumentManagement == null)
                _DocumentManagement = new DocumentManagement(this);


            this.Context.Add("LoginMain", AssemblyLoad.LoginMain);
            this.Context.Add("AccountingURL", AssemblyLoad.AccountingURL);
            this.Context.Add("TwfcndURL", AssemblyLoad.TwfcndURL);
            this.PreAuthenticate = true;
            this.Proxy = "default";
            this.StopOnError = true;
            _textContext = this.Context;

            this.PreWebTest += TwinfieldWebLoadTestPlugin.PreWebTestEvent;
            this.PreRequest += objPlugin.Test_PreRequest;
            this.PostRequest += objPlugin.Test_PostRequest;
        }

        public override IEnumerator<WebTestRequest> GetRequestEnumerator()
        {
            _textContext = this._textContext;
            return _DocumentManagement.GetRequestEnumerator(TwinfieldDBTenant.C, Context.WebTestUserId.ToString(), objPlugin);
        }
    }

    public class DocumentManagement_D : WebTest
    {
        DocumentManagement _DocumentManagement = null;
        WebTestRequestPlugin objPlugin = new WebTestRequestPlugin();
        private WebTestContext _textContext;
        public DocumentManagement_D()
        {
            if (_DocumentManagement == null)
                _DocumentManagement = new DocumentManagement(this);


            this.Context.Add("LoginMain", AssemblyLoad.LoginMain);
            this.Context.Add("AccountingURL", AssemblyLoad.AccountingURL);
            this.Context.Add("TwfcndURL", AssemblyLoad.TwfcndURL);
            this.PreAuthenticate = true;
            this.Proxy = "default";
            this.StopOnError = true;
            _textContext = this.Context;

            this.PreWebTest += TwinfieldWebLoadTestPlugin.PreWebTestEvent;
            this.PreRequest += objPlugin.Test_PreRequest;
            this.PostRequest += objPlugin.Test_PostRequest;
        }

        public override IEnumerator<WebTestRequest> GetRequestEnumerator()
        {
            _textContext = this._textContext;
            return _DocumentManagement.GetRequestEnumerator(TwinfieldDBTenant.D, Context.WebTestUserId.ToString(), objPlugin);
        }
    }

    public class DocumentManagement_E : WebTest
    {
        DocumentManagement _DocumentManagement = null;
        WebTestRequestPlugin objPlugin = new WebTestRequestPlugin();
        private WebTestContext _textContext;
        public DocumentManagement_E()
        {
            if (_DocumentManagement == null)
                _DocumentManagement = new DocumentManagement(this);


            this.Context.Add("LoginMain", AssemblyLoad.LoginMain);
            this.Context.Add("AccountingURL", AssemblyLoad.AccountingURL);
            this.Context.Add("TwfcndURL", AssemblyLoad.TwfcndURL);
            this.PreAuthenticate = true;
            this.Proxy = "default";
            this.StopOnError = true;
            _textContext = this.Context;

            this.PreWebTest += TwinfieldWebLoadTestPlugin.PreWebTestEvent;
            this.PreRequest += objPlugin.Test_PreRequest;
            this.PostRequest += objPlugin.Test_PostRequest;
        }

        public override IEnumerator<WebTestRequest> GetRequestEnumerator()
        {
            _textContext = this._textContext;
            return _DocumentManagement.GetRequestEnumerator(TwinfieldDBTenant.E, Context.WebTestUserId.ToString(), objPlugin);
        }
    }
}
