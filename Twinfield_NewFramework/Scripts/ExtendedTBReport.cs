//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Twinfield_NewFramework
{
    using System;
    using System.Collections.Generic;
    using System.Text;
    using Microsoft.VisualStudio.TestTools.WebTesting;
    using Microsoft.VisualStudio.TestTools.WebTesting.Rules;
    using Newtonsoft.Json;
    using Microsoft.VisualStudio.TestTools.LoadTesting;
    //using MicrosoftServicesTestLabs.Monitor.VSTSUnitTest;
    using System.Drawing;
    using System.Threading;
    using System.Data;
    using System.Reflection;

    public class ExtendedTBReport
    {
        WebTest webTest;
        private Dictionary<string, string> localDictionary;
        WebTestRequestPlugin objPlugin = new WebTestRequestPlugin();    //object of webTesRequestPlugin class to access the variables uniquely in each thread.
        private InputTableRecord testRecord;
        public Object assemblyinitializeLock = new Object();
        private WebTestContext _textContext;
        private object virtualuserId;
        private object doLogin;
        string OfficeManagementID = string.Empty;
        private string companyTypeDescription;

        public ExtendedTBReport(WebTest webTest)
        {
            this.webTest = webTest;
            
        }
        public WebTestContext TestContext
        {
            get { return _textContext; }

            set { _textContext = value; }
        }
        
        public IEnumerator<WebTestRequest> GetRequestEnumerator(TwinfieldDBTenant DBTenant,string userDictionaryKey, WebTestRequestPlugin objPlugin)
        {
            var WebBTPrefix = TwinfieldScenarioPrefix.ETBR_ + DBTenant.ToString() + "_";
            _textContext = webTest.Context;
            _textContext.TryGetValue("doLogin", out doLogin);
            _textContext.TryGetValue("UserId", out virtualuserId);

            SharedThreadData threadData;

            #region DoLogin
            if (Convert.ToBoolean(doLogin))
            {
                webTest.Context.CookieContainer = new System.Net.CookieContainer();

                try
                {
                    localDictionary = CustomDS.Instance.GetNextRowTwinfield(DBTenant, TwinfieldScenarioName.ExtendedTBReport);
                    
                    threadData = new SharedThreadData(Convert.ToInt32(virtualuserId),this.TestContext);
                    threadData.UserName = localDictionary["UserName"];
                    threadData.Tenant = localDictionary["DBTenant"];
                    threadData.CustomerName = localDictionary["CustomerName"];
                    threadData.hasFullAccess = localDictionary["hasFullAccess"];
                    threadData.Password = AssemblyLoad.Password;
                    threadData.ScenarioPrefix = WebBTPrefix;
                    CustomDS.Instance.Save_ExtendedTBReport_UserData(Convert.ToInt32(virtualuserId), threadData, DBTenant);
                    Logger.WriteGeneralLogUser(TwinfieldScenarioName.ExtendedTBReport + " : " + DBTenant + " : LoggedIn : " + virtualuserId); 
                }
                catch (Exception ex)
                {

                    Logger.WriteGeneralLog("Input Data not fetched for:" + TwinfieldScenarioName.ExtendedTBReport);
                    throw new Exception("Error in reading data for " + TwinfieldScenarioName.ExtendedTBReport + " : " + ex.Message);

                }
                if(threadData.hasFullAccess=="0")
                {
                    foreach (var request in webTest.LaunchLogin(threadData, objPlugin)) yield return request;
                }
                else
                {
                    foreach (var request in webTest.LaunchLogin_FullAccess(threadData, objPlugin)) yield return request;
                }
                //RTMonitor.Write(Color.Green, "Create Invoice Login User: " + threadData.UserName + "with iteration no :" + threadData.iterationCount + " LoginTime: " + DateTime.Now + "\r\n");
                CustomDS.Instance.Save_ExtendedTBReport_UserData(Convert.ToInt32(virtualuserId), threadData, DBTenant);
                //Logger.WriteGeneralLog("Create Invoice : Vuser - " + Convert.ToInt32(virtualuserId).ToString() + " Logged In");
            }
            else
            {
                try
                {
                    threadData = CustomDS.Instance.Get_ExtendedTBReport_UserData(Convert.ToInt32(virtualuserId), DBTenant);
                    Logger.WriteGeneralLogUser(TwinfieldScenarioName.ExtendedTBReport + " : " + DBTenant + " : NotLoggedIn : " + virtualuserId);

                }
                catch (Exception ex)
                {

                    Logger.WriteGeneralLog("Input Data not saved for :" + TwinfieldScenarioName.ExtendedTBReport);
                    throw new Exception("Error in getting data for " + TwinfieldScenarioName.ExtendedTBReport + " : " + ex.Message);

                }
            }
            #endregion DoLogin

            WebBTPrefix = threadData.ScenarioPrefix;
            string WebRequestPrefix = "";

            #region Report-tab
            webTest.BeginTransaction(WebBTPrefix + "ReportTab");
            WebRequestPrefix = "RT_";

            webTest.BeginTransaction(WebRequestPrefix + "en-GB_reports_reports.html");
            WebTestRequest request135 = new WebTestRequest((webTest.Context["TwfcndURL"].ToString() + "/" + threadData.BuildVersion + "/en-GB/reports/reports.html"));
            request135.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/plain, */*;version=latest"));
            request135.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request135;
            request135 = null;
            webTest.EndTransaction(WebRequestPrefix + "en-GB_reports_reports.html");


            webTest.BeginTransaction(WebRequestPrefix + "api_accessoverview");
            WebTestRequest request136 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/accessoverview"));
            request136.Method = "OPTIONS";
            request136.Headers.Add(new WebTestRequestHeader("Accept", "application/vnd.twinfield+json;version=latest"));
            request136.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            StringHttpBody request136Body = new StringHttpBody();
            request136Body.ContentType = "";
            request136Body.InsertByteOrderMark = false;
            request136Body.BodyString = "";
            request136.Body = request136Body;
            yield return request136;
            request136 = null;
            webTest.EndTransaction(WebRequestPrefix + "api_accessoverview");

            webTest.BeginTransaction(WebRequestPrefix + "desktop_view_cr-dashboard-sub-section-tile.htm");
            WebTestRequest request137 = new WebTestRequest((webTest.Context["TwfcndURL"].ToString() + "/" + threadData.BuildVersion + "/en-GB/_components/framework/desktop/view/cr-dashboard-sub-section-tile.htm" +
                    "l"));
            request137.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/plain, */*;version=latest"));
            request137.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request137;
            request137 = null;
            webTest.EndTransaction(WebRequestPrefix + "desktop_view_cr-dashboard-sub-section-tile.htm");

            webTest.BeginTransaction(WebRequestPrefix + "framework_desktop_view_cr-basic-group-tile.html");
            WebTestRequest request138 = new WebTestRequest((webTest.Context["TwfcndURL"].ToString() + "/" + threadData.BuildVersion + "/en-GB/_components/framework/desktop/view/cr-basic-group-tile.html"));
            request138.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/plain, */*;version=latest"));
            request138.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request138;
            request138 = null;
            webTest.EndTransaction(WebRequestPrefix + "framework_desktop_view_cr-basic-group-tile.html");

            webTest.BeginTransaction(WebRequestPrefix + "framework_desktop_view_cr-links-tile.html");
            WebTestRequest request139 = new WebTestRequest((webTest.Context["TwfcndURL"].ToString() + "/" + threadData.BuildVersion + "/en-GB/_components/framework/desktop/view/cr-links-tile.html"));
            request139.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/plain, */*;version=latest"));
            request139.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request139;
            request139 = null;
            webTest.EndTransaction(WebRequestPrefix + "framework_desktop_view_cr-links-tile.html");

            //WebTestRequest request140 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/sales/tasks"));
            //request140.Headers.Add(new WebTestRequestHeader("Accept", "application/vnd.twinfield+json;version=latest"));
            //request140.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            //yield return request140;
            //request140 = null;

            webTest.BeginTransaction(WebRequestPrefix + "api_reports");
            WebTestRequest reques148 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/reports"));
            reques148.Method = "OPTIONS";
            reques148.Headers.Add(new WebTestRequestHeader("Accept", "application/vnd.twinfield+json;version=latest"));
            reques148.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            StringHttpBody reques148Body = new StringHttpBody();
            reques148Body.ContentType = "";
            reques148Body.InsertByteOrderMark = false;
            reques148Body.BodyString = "";
            reques148.Body = reques148Body;
            yield return reques148;
            reques148 = null;
            webTest.EndTransaction(WebRequestPrefix + "api_reports");

            webTest.BeginTransaction(WebRequestPrefix + "api_reports_audittrails");
            WebTestRequest reques149 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/reports/audittrails"));
            reques149.ThinkTime = 1;
            reques149.Method = "OPTIONS";
            reques149.Headers.Add(new WebTestRequestHeader("Accept", "application/vnd.twinfield+json;version=latest"));
            reques149.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            StringHttpBody reques149Body = new StringHttpBody();
            reques149Body.ContentType = "";
            reques149Body.InsertByteOrderMark = false;
            reques149Body.BodyString = "";
            reques149.Body = reques149Body;
            yield return reques149;
            reques149 = null;
            webTest.EndTransaction(WebRequestPrefix + "api_reports_audittrails");

            //WebTestRequest request141 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/notifications"));
            //request141.Headers.Add(new WebTestRequestHeader("Accept", "application/vnd.twinfield+json;version=latest"));
            //request141.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            //request141.QueryStringParameters.Add("since", threadData.CreatedDate, false, false);
            //yield return request141;
            //request141 = null;

            webTest.EndTransaction(WebBTPrefix + "ReportTab");

            #endregion
            Thread.Sleep(2000);

            #region report icon
            webTest.BeginTransaction(WebBTPrefix + "ClickOnReportIcon");
            WebRequestPrefix = "RI_";

            //WebTestRequest request142 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/UI/"));
            //request142.ExpectedResponseUrl = (webTest.Context["AccountingURL"].ToString() + "/UI/#/Reports/Categories");
            //yield return request142;
            //request142 = null;

            webTest.BeginTransaction(WebRequestPrefix + "en-GB_home_classic_classic.html");
            WebTestRequest request143 = new WebTestRequest((webTest.Context["TwfcndURL"].ToString() + "/" + threadData.BuildVersion + "/en-GB/home/classic/classic.html"));
            request143.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/plain, */*;version=latest"));
            request143.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request143;
            request143 = null;
            webTest.EndTransaction(WebRequestPrefix + "en-GB_home_classic_classic.html");

            webTest.BeginTransaction(WebRequestPrefix + "reporting");
            WebTestRequest request144 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/reporting/"));
            request144.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request144;
            request144 = null;
            webTest.EndTransaction(WebRequestPrefix + "reporting");

            //WebTestRequest request145 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/sales/tasks"));
            //request145.Headers.Add(new WebTestRequestHeader("Accept", "application/vnd.twinfield+json;version=latest"));
            //request145.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            //yield return request145;
            //request145 = null;

            //WebTestRequest request146 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/notifications"));
            //request146.Headers.Add(new WebTestRequestHeader("Accept", "application/vnd.twinfield+json;version=latest"));
            //request146.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            //request146.QueryStringParameters.Add("since", threadData.CreatedDate, false, false);
            //yield return request146;
            //request146 = null;
            webTest.EndTransaction(WebBTPrefix + "ClickOnReportIcon");
            #endregion
            Thread.Sleep(2000);

            #region General Ledger click
            webTest.BeginTransaction(WebBTPrefix + "GeneralLedgerClick");
            WebRequestPrefix = "GLC_";

            webTest.BeginTransaction(WebRequestPrefix + "reporting_reportlist.aspx");
            WebTestRequest request147 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/reporting/reportlist.aspx"));
            request147.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/reporting/")));
            request147.QueryStringParameters.Add("category", "MSC", false, false);  //code for General Ledger report category
            yield return request147;
            request147 = null;
            webTest.EndTransaction(WebRequestPrefix + "reporting_reportlist.aspx");

            //WebTestRequest request148 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/notifications"));
            //request148.Headers.Add(new WebTestRequestHeader("Accept", "application/vnd.twinfield+json;version=latest"));
            //request148.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            //request148.QueryStringParameters.Add("since", threadData.CreatedDate, false, false);
            //yield return request148;
            //request148 = null;

            webTest.EndTransaction(WebBTPrefix + "GeneralLedgerClick");

            #endregion
            Thread.Sleep(2000);

            #region Extended Trial Balance
            webTest.BeginTransaction(WebBTPrefix + "ExtendedTrialBalance");
            WebRequestPrefix = "ETB_";

            //WebTestRequest request149 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/notifications"));
            //request149.Headers.Add(new WebTestRequestHeader("Accept", "application/vnd.twinfield+json;version=latest"));
            //request149.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            //request149.QueryStringParameters.Add("since", threadData.CreatedDate, false, false);
            //yield return request149;
            //request149 = null;

            webTest.BeginTransaction(WebRequestPrefix + "reporting_prompts.aspx");
            WebTestRequest request150 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/reporting/prompts.aspx"));
            request150.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/reporting/reportlist.aspx?category=MSC")));
            request150.QueryStringParameters.Add("report", "ETB", false, false);
            request150.QueryStringParameters.Add("category", "MSC", false, false);
            request150.QueryStringParameters.Add("reportid", "0", false, false);
            ExtractHiddenFields extractionRule3 = new ExtractHiddenFields();
            extractionRule3.Required = true;
            extractionRule3.HtmlDecode = true;
            extractionRule3.ContextParameterName = "1";
            request150.ExtractValues += new EventHandler<ExtractionEventArgs>(extractionRule3.Extract);
            ExtractText extractionRule2 = new ExtractText();
            extractionRule2.StartsWith = "name=\"__ncforminfo\" value=\"";
            extractionRule2.EndsWith = "\"/></FORM>";
            extractionRule2.Index = 0;
            extractionRule2.IgnoreCase = false;
            extractionRule2.UseRegularExpression = false;
            extractionRule2.HtmlDecode = true;
            extractionRule2.Required = false;
            extractionRule2.ContextParameterName = "NcformInfo";
            request150.ExtractValues += new EventHandler<ExtractionEventArgs>(extractionRule2.Extract);
            ExtractText extractionRule4 = new ExtractText();
            extractionRule4.StartsWith = "chkOS_Office_";
            extractionRule4.EndsWith = "\" ID=\"chkOS_Office";
            extractionRule4.Index = 0;
            extractionRule4.IgnoreCase = false;
            extractionRule4.UseRegularExpression = false;
            extractionRule4.HtmlDecode = true;
            extractionRule4.Required = false;
            extractionRule4.ContextParameterName = "CompanyName";
            request150.ExtractValues += new EventHandler<ExtractionEventArgs>(extractionRule4.Extract);
            yield return request150;
            request150 = null;
            webTest.EndTransaction(WebRequestPrefix + "reporting_prompts.aspx");

            webTest.EndTransaction(WebBTPrefix + "ExtendedTrialBalance");
            #endregion
            Thread.Sleep(2000);

            #region Click next
            webTest.BeginTransaction(WebBTPrefix + "ClickNext");
            WebRequestPrefix = "CN_";

            webTest.BeginTransaction(WebRequestPrefix + "reporting_prompts.aspx_1");
            WebTestRequest request152 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/reporting/prompts.aspx"));
            request152.Method = "POST";
            request152.ExpectedResponseUrl = (webTest.Context["AccountingURL"].ToString() + "/reporting/report.aspx?category=MSC&report=ETB&reportid=0&tempxml=");
            request152.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/reporting/prompts.aspx?report=ETB&category=MSC&reportid=0")));
            request152.QueryStringParameters.Add("category", "MSC", false, false);
            request152.QueryStringParameters.Add("report", "ETB", false, false);
            request152.QueryStringParameters.Add("reportid", "0", false, false);
            FormPostHttpBody request152Body = new FormPostHttpBody();
            request152Body.FormPostParameters.Add("hdnButtonPushed", "view");
            request152Body.FormPostParameters.Add("subreportsDropdown", "0");
            request152Body.FormPostParameters.Add("HierarchyLevel", "");
            request152Body.FormPostParameters.Add("HierarchyLevel_Name", "");
            request152Body.FormPostParameters.Add("HierarchyLevel_HiddenStatus", webTest.Context["$HIDDEN1.HierarchyLevel_HiddenStatus"].ToString());
            request152Body.FormPostParameters.Add("HierarchyLevel_Levels", "0");
            request152Body.FormPostParameters.Add("radOfficeSelector", "Current");
            request152Body.FormPostParameters.Add("chkOS_Office_" + webTest.Context["CompanyName"].ToString(), "");
            request152Body.FormPostParameters.Add("HierarchyNode", "");
            request152Body.FormPostParameters.Add("HierarchyNode_Name", "");
            request152Body.FormPostParameters.Add("HierarchyNode_HiddenStatus", webTest.Context["$HIDDEN1.HierarchyNode_HiddenStatus"].ToString());
            request152Body.FormPostParameters.Add("YearPeriod", "2017/00");
            request152Body.FormPostParameters.Add("YearPeriod_Name", "");
            request152Body.FormPostParameters.Add("YearPeriod_HiddenStatus", webTest.Context["$HIDDEN1.YearPeriod_HiddenStatus"].ToString());
            request152Body.FormPostParameters.Add("YearPeriod_To", "2017/12");
            request152Body.FormPostParameters.Add("YearPeriod_To_Name", "");
            request152Body.FormPostParameters.Add("GeneralLedgerAccountType_Type_0", "BAS");
            request152Body.FormPostParameters.Add("GeneralLedgerAccountType_Type_1", "PNL");
            request152Body.FormPostParameters.Add("GeneralLedgerAccountType", "");
            request152Body.FormPostParameters.Add("GeneralLedgerAccountType_Name", "");
            request152Body.FormPostParameters.Add("GeneralLedgerAccountType_HiddenStatus", webTest.Context["$HIDDEN1.GeneralLedgerAccountType_HiddenStatus"].ToString());
            request152Body.FormPostParameters.Add("GeneralLedgerAccountType_To", "");
            request152Body.FormPostParameters.Add("GeneralLedgerAccountType_To_Name", "");
            request152Body.FormPostParameters.Add("RelationCostCentreType", "");
            request152Body.FormPostParameters.Add("RelationCostCentreType_Name", "");
            request152Body.FormPostParameters.Add("RelationCostCentreType_HiddenStatus", webTest.Context["$HIDDEN1.RelationCostCentreType_HiddenStatus"].ToString());
            request152Body.FormPostParameters.Add("RelationCostCentreType_To", "");
            request152Body.FormPostParameters.Add("RelationCostCentreType_To_Name", "");
            request152Body.FormPostParameters.Add("ProjectAssetType", "");
            request152Body.FormPostParameters.Add("ProjectAssetType_Name", "");
            request152Body.FormPostParameters.Add("ProjectAssetType_HiddenStatus", webTest.Context["$HIDDEN1.ProjectAssetType_HiddenStatus"].ToString());
            request152Body.FormPostParameters.Add("ProjectAssetType_To", "");
            request152Body.FormPostParameters.Add("ProjectAssetType_To_Name", "");
            request152Body.FormPostParameters.Add("ActivityType", "");
            request152Body.FormPostParameters.Add("ActivityType_Name", "");
            request152Body.FormPostParameters.Add("ActivityType_HiddenStatus", webTest.Context["$HIDDEN1.ActivityType_HiddenStatus"].ToString());
            request152Body.FormPostParameters.Add("ActivityType_To", "");
            request152Body.FormPostParameters.Add("ActivityType_To_Name", "");
            request152Body.FormPostParameters.Add("SubanalyseOn_locked", webTest.Context["$HIDDEN1.SubanalyseOn_locked"].ToString());
            request152Body.FormPostParameters.Add("TransactionStatus1", "1");
            request152Body.FormPostParameters.Add("TransactionStatus2", "2");
            request152Body.FormPostParameters.Add("Precision", "1");
            request152Body.FormPostParameters.Add("ShowNonAttachedAccounts", "");
            //request152Body.FormPostParameters.Add("__ncforminfo", webTest.Context["NcformInfo"].ToString());
            request152.Body = request152Body;
            ExtractText tempxml = new ExtractText();
            tempxml.StartsWith = "tempxml=";
            tempxml.EndsWith = "\"";
            tempxml.Index = 0;
            tempxml.IgnoreCase = false;
            tempxml.UseRegularExpression = false;
            tempxml.HtmlDecode = true;
            tempxml.Required = false;
            tempxml.ContextParameterName = "tempxml";
            request152.ExtractValues += new EventHandler<ExtractionEventArgs>(tempxml.Extract);
            yield return request152;
            request152 = null;
            webTest.EndTransaction(WebRequestPrefix + "reporting_prompts.aspx_1");

            //WebTestRequest request153 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/notifications"));
            //request153.Headers.Add(new WebTestRequestHeader("Accept", "application/vnd.twinfield+json;version=latest"));
            //request153.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            //request153.QueryStringParameters.Add("since", threadData.CreatedDate, false, false);
            //yield return request153;
            //request153 = null;

            webTest.EndTransaction(WebBTPrefix + "ClickNext");
            #endregion
            Thread.Sleep(2000);

            #region Export Click
            webTest.BeginTransaction(WebBTPrefix + "ExportClick");
            WebRequestPrefix = "EC_";

            webTest.BeginTransaction(WebRequestPrefix + "reporting_export.aspx");
            WebTestRequest request154 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/reporting/export.aspx"));
            request154.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/reporting/report.aspx?category=MSC&report=ETB&reportid=0&tempxml=" + webTest.Context["tempxml"].ToString())));
            request154.QueryStringParameters.Add("category", "MSC", false, false);
            request154.QueryStringParameters.Add("report", "ETB", false, false);
            request154.QueryStringParameters.Add("reportid", "0", false, false);
            request154.QueryStringParameters.Add("tempxml", webTest.Context["tempxml"].ToString(), false, false);
            ExtractText extraction2 = new ExtractText();
            extraction2.StartsWith = "name=\"__ncforminfo\" value=\"";
            extraction2.EndsWith = "\"/>";
            extraction2.IgnoreCase = false;
            extraction2.UseRegularExpression = false;
            extraction2.Required = false;
            extraction2.ExtractRandomMatch = false;
            extraction2.Index = 0;
            extraction2.HtmlDecode = true;
            extraction2.SearchInHeaders = false;
            extraction2.ContextParameterName = "__ncforminfo";
            request154.ExtractValues += new EventHandler<ExtractionEventArgs>(extraction2.Extract);

            yield return request154;
            request154 = null;
            webTest.EndTransaction(WebRequestPrefix + "reporting_export.aspx");

            webTest.EndTransaction(WebBTPrefix + "ExportClick");
            #endregion
            Thread.Sleep(2000);

            #region Next on export page
            webTest.BeginTransaction(WebBTPrefix + "ClickNextOnExportPage");
            WebRequestPrefix = "CNOEP_";

            webTest.BeginTransaction(WebRequestPrefix + "reporting_export.aspx_1");
            WebTestRequest request155 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/reporting/export.aspx"));
            request155.Method = "POST";
            request155.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/reporting/export.aspx?category=MSC&report=ETB&reportid=0&tempxml=" + webTest.Context["tempxml"].ToString())));
            request155.QueryStringParameters.Add("category", "MSC", false, false);
            request155.QueryStringParameters.Add("report", "ETB", false, false);
            request155.QueryStringParameters.Add("reportid", "0", false, false);
            request155.QueryStringParameters.Add("tempxml", webTest.Context["tempxml"].ToString(), false, false);
            FormPostHttpBody request155Body = new FormPostHttpBody();
            request155Body.FormPostParameters.Add("lstReportTypes", "2");
            request155Body.FormPostParameters.Add("PdfPageBreakAfterGroup", "-1");
            request155Body.FormPostParameters.Add("Orientation", "0");
            request155Body.FormPostParameters.Add("FontSize", "8");
            request155Body.FormPostParameters.Add("FontSize_To", "12");
            request155Body.FormPostParameters.Add("Footer", "");
            request155Body.FormPostParameters.Add("btnExport.x", "Next >");
            //request155Body.FormPostParameters.Add("__ncforminfo", __ncforminfo);
            request155.Body = request155Body;
            yield return request155;
            request155 = null;
            webTest.EndTransaction(WebRequestPrefix + "reporting_export.aspx_1");

            webTest.EndTransaction(WebBTPrefix + "ClickNextOnExportPage");
            #endregion
            Thread.Sleep(2000);

            #region file manager
            webTest.BeginTransaction(WebBTPrefix + "FileManager");
            WebRequestPrefix = "FM_";

            webTest.BeginTransaction(WebRequestPrefix + "fileman_fileman.aspx");
            WebTestRequest request156 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/fileman/fileman.aspx"));
            request156.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/reporting/export.aspx?category=MSC&report=ETB&reportid=0&tempxml=" + webTest.Context["tempxml"].ToString())));
            yield return request156;
            request156 = null;
            webTest.EndTransaction(WebRequestPrefix + "fileman_fileman.aspx");

            //WebTestRequest request157 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/notifications"));
            //request157.Headers.Add(new WebTestRequestHeader("Accept", "application/vnd.twinfield+json;version=latest"));
            //request157.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            //request157.QueryStringParameters.Add("since", threadData.CreatedDate, false, false);
            //yield return request157;
            //request157 = null;
            webTest.EndTransaction(WebBTPrefix + "FileManager");
            #endregion
            Thread.Sleep(4000);

            #region Reports click
            webTest.BeginTransaction(WebBTPrefix + "ReportsClick");
            WebRequestPrefix = "RC_";

            webTest.BeginTransaction(WebRequestPrefix + "fileman_fileman.aspx_1");
            WebTestRequest request158 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/fileman/fileman.aspx"));
            request158.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/fileman/fileman.aspx")));
            request158.QueryStringParameters.Add("folder", ".%5cReports", false, false);
            ExtractText extractionRule1 = new ExtractText();
            extractionRule1.StartsWith = "event,this,'file',";
            extractionRule1.EndsWith = ",'Extended";
            extractionRule1.Index = 0;
            extractionRule1.IgnoreCase = false;
            extractionRule1.UseRegularExpression = false;
            extractionRule1.HtmlDecode = true;
            extractionRule1.Required = true;
            extractionRule1.ContextParameterName = "FileID";
            request158.ExtractValues += new EventHandler<ExtractionEventArgs>(extractionRule1.Extract);
            yield return request158;
            request158 = null;
            webTest.EndTransaction(WebRequestPrefix + "fileman_fileman.aspx_1");

            //WebTestRequest request159 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/notifications"));
            //request159.Headers.Add(new WebTestRequestHeader("Accept", "application/vnd.twinfield+json;version=latest"));
            //request159.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            //request159.QueryStringParameters.Add("since", threadData.CreatedDate, false, false);
            //yield return request159;
            //request159 = null;

            webTest.EndTransaction(WebBTPrefix + "ReportsClick");
            #endregion
            Thread.Sleep(2000);

            #region  Report download
            webTest.BeginTransaction(WebBTPrefix + "ReportDownload");
            WebRequestPrefix = "RD_";

            webTest.BeginTransaction(WebRequestPrefix + "fileman_download.aspx");
            WebTestRequest request160 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/fileman/download.aspx"));
            request160.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/fileman/fileman.aspx?folder=.%5cReports")));
            request160.QueryStringParameters.Add("fileid", webTest.Context["FileID"].ToString(), false, false);
            yield return request160;
            request160 = null;
            webTest.EndTransaction(WebRequestPrefix + "fileman_download.aspx");

            //WebTestRequest request161 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/notifications"));
            //request161.Headers.Add(new WebTestRequestHeader("Accept", "application/vnd.twinfield+json;version=latest"));
            //request161.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            //request161.QueryStringParameters.Add("since", threadData.CreatedDate, false, false);
            //yield return request161;
            //request161 = null;

            webTest.EndTransaction(WebBTPrefix + "ReportDownload");
            #endregion
            Thread.Sleep(2000);

            if ((Convert.ToInt32(webTest.Context["iterationNo"])% Convert.ToInt32(webTest.Context["maxiterationNo"])) ==0)
            {
                foreach (var request in webTest.Logout(threadData, objPlugin)) yield return request;
                //RTMonitor.Write(Color.Green, "User Logout: " + threadData.UserName + " LogOutTime: " + DateTime.Now + "\r\n");
                Thread.Sleep(2000);
            }
        }
        
    }
    public class ExtendedTBReport_A : WebTest
    {
        ExtendedTBReport _ExtendedTBReport = null;
        WebTestRequestPlugin objPlugin = new WebTestRequestPlugin();
        private WebTestContext _textContext;
        public ExtendedTBReport_A()
        {
            if (_ExtendedTBReport == null)
                _ExtendedTBReport = new ExtendedTBReport(this);


            this.Context.Add("LoginMain", AssemblyLoad.LoginMain);
            this.Context.Add("AccountingURL", AssemblyLoad.AccountingURL);
            this.Context.Add("TwfcndURL", AssemblyLoad.TwfcndURL);
            this.PreAuthenticate = true;
            this.Proxy = "default";
            this.StopOnError = true;
            _textContext = this.Context;

            this.PreWebTest += TwinfieldWebLoadTestPlugin.PreWebTestEvent;
            this.PreRequest += objPlugin.Test_PreRequest;
            this.PostRequest += objPlugin.Test_PostRequest;
        }

        public override IEnumerator<WebTestRequest> GetRequestEnumerator()
        {
            _textContext= this._textContext;
            return _ExtendedTBReport.GetRequestEnumerator(TwinfieldDBTenant.A, Context.WebTestUserId.ToString(), objPlugin);
        }
    }

    public class ExtendedTBReport_B : WebTest
    {
        ExtendedTBReport _ExtendedTBReport = null;
        WebTestRequestPlugin objPlugin = new WebTestRequestPlugin();
        private WebTestContext _textContext;
        public ExtendedTBReport_B()
        {
            if (_ExtendedTBReport == null)
                _ExtendedTBReport = new ExtendedTBReport(this);


            this.Context.Add("LoginMain", AssemblyLoad.LoginMain);
            this.Context.Add("AccountingURL", AssemblyLoad.AccountingURL);
            this.Context.Add("TwfcndURL", AssemblyLoad.TwfcndURL);
            this.PreAuthenticate = true;
            this.Proxy = "default";
            this.StopOnError = true;
            _textContext = this.Context;

            this.PreWebTest += TwinfieldWebLoadTestPlugin.PreWebTestEvent;
            this.PreRequest += objPlugin.Test_PreRequest;
            this.PostRequest += objPlugin.Test_PostRequest;
        }

        public override IEnumerator<WebTestRequest> GetRequestEnumerator()
        {
            _textContext = this._textContext;
            return _ExtendedTBReport.GetRequestEnumerator(TwinfieldDBTenant.B, Context.WebTestUserId.ToString(), objPlugin);
        }
    }

    public class ExtendedTBReport_C : WebTest
    {
        ExtendedTBReport _ExtendedTBReport = null;
        WebTestRequestPlugin objPlugin = new WebTestRequestPlugin();
        private WebTestContext _textContext;
        public ExtendedTBReport_C()
        {
            if (_ExtendedTBReport == null)
                _ExtendedTBReport = new ExtendedTBReport(this);


            this.Context.Add("LoginMain", AssemblyLoad.LoginMain);
            this.Context.Add("AccountingURL", AssemblyLoad.AccountingURL);
            this.Context.Add("TwfcndURL", AssemblyLoad.TwfcndURL);
            this.PreAuthenticate = true;
            this.Proxy = "default";
            this.StopOnError = true;
            _textContext = this.Context;

            this.PreWebTest += TwinfieldWebLoadTestPlugin.PreWebTestEvent;
            this.PreRequest += objPlugin.Test_PreRequest;
            this.PostRequest += objPlugin.Test_PostRequest;
        }

        public override IEnumerator<WebTestRequest> GetRequestEnumerator()
        {
            _textContext = this._textContext;
            return _ExtendedTBReport.GetRequestEnumerator(TwinfieldDBTenant.C, Context.WebTestUserId.ToString(), objPlugin);
        }
    }

    public class ExtendedTBReport_D : WebTest
    {
        ExtendedTBReport _ExtendedTBReport = null;
        WebTestRequestPlugin objPlugin = new WebTestRequestPlugin();
        private WebTestContext _textContext;
        public ExtendedTBReport_D()
        {
            if (_ExtendedTBReport == null)
                _ExtendedTBReport = new ExtendedTBReport(this);


            this.Context.Add("LoginMain", AssemblyLoad.LoginMain);
            this.Context.Add("AccountingURL", AssemblyLoad.AccountingURL);
            this.Context.Add("TwfcndURL", AssemblyLoad.TwfcndURL);
            this.PreAuthenticate = true;
            this.Proxy = "default";
            this.StopOnError = true;
            _textContext = this.Context;

            this.PreWebTest += TwinfieldWebLoadTestPlugin.PreWebTestEvent;
            this.PreRequest += objPlugin.Test_PreRequest;
            this.PostRequest += objPlugin.Test_PostRequest;
        }

        public override IEnumerator<WebTestRequest> GetRequestEnumerator()
        {
            _textContext = this._textContext;
            return _ExtendedTBReport.GetRequestEnumerator(TwinfieldDBTenant.D, Context.WebTestUserId.ToString(), objPlugin);
        }
    }

    public class ExtendedTBReport_E : WebTest
    {
        ExtendedTBReport _ExtendedTBReport = null;
        WebTestRequestPlugin objPlugin = new WebTestRequestPlugin();
        private WebTestContext _textContext;
        public ExtendedTBReport_E()
        {
            if (_ExtendedTBReport == null)
                _ExtendedTBReport = new ExtendedTBReport(this);


            this.Context.Add("LoginMain", AssemblyLoad.LoginMain);
            this.Context.Add("AccountingURL", AssemblyLoad.AccountingURL);
            this.Context.Add("TwfcndURL", AssemblyLoad.TwfcndURL);
            this.PreAuthenticate = true;
            this.Proxy = "default";
            this.StopOnError = true;
            _textContext = this.Context;

            this.PreWebTest += TwinfieldWebLoadTestPlugin.PreWebTestEvent;
            this.PreRequest += objPlugin.Test_PreRequest;
            this.PostRequest += objPlugin.Test_PostRequest;
        }

        public override IEnumerator<WebTestRequest> GetRequestEnumerator()
        {
            _textContext = this._textContext;
            return _ExtendedTBReport.GetRequestEnumerator(TwinfieldDBTenant.E, Context.WebTestUserId.ToString(), objPlugin);
        }
    }
}
