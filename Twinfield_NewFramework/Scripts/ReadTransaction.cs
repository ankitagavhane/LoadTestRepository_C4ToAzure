//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Twinfield_NewFramework
{
    using System;
    using System.Collections.Generic;
    using System.Text;
    using Microsoft.VisualStudio.TestTools.WebTesting;
    using Microsoft.VisualStudio.TestTools.WebTesting.Rules;
    using Newtonsoft.Json;
    using Microsoft.VisualStudio.TestTools.LoadTesting;
    //using MicrosoftServicesTestLabs.Monitor.VSTSUnitTest;
    using System.Drawing;
    using System.Threading;
    using System.Data;
    using System.Reflection;
    using System.Web;

    public class ReadTransaction
    {
        WebTest webTest;
        private Dictionary<string, string> localDictionary;
        WebTestRequestPlugin objPlugin = new WebTestRequestPlugin();    //object of webTesRequestPlugin class to access the variables uniquely in each thread.
        private InputTableRecord testRecord;
        public Object assemblyinitializeLock = new Object();
        private WebTestContext _textContext;
        private object virtualuserId;
        private object doLogin;
        string OfficeManagementID = string.Empty;
        private string companyTypeDescription;

        public ReadTransaction(WebTest webTest)
        {
            this.webTest = webTest;
            
        }
        public WebTestContext TestContext
        {
            get { return _textContext; }

            set { _textContext = value; }
        }
        
        public IEnumerator<WebTestRequest> GetRequestEnumerator(TwinfieldDBTenant DBTenant,string userDictionaryKey, WebTestRequestPlugin objPlugin)
        {
            var WebBTPrefix = TwinfieldScenarioPrefix.RT_ + DBTenant.ToString() + "_";
            _textContext = webTest.Context;
            _textContext.TryGetValue("doLogin", out doLogin);
            _textContext.TryGetValue("UserId", out virtualuserId);

            SharedThreadData threadData;

            #region DoLogin
            if (Convert.ToBoolean(doLogin))
            {
                webTest.Context.CookieContainer = new System.Net.CookieContainer();

                try
                {
                    localDictionary = CustomDS.Instance.GetNextRowTwinfield(DBTenant, TwinfieldScenarioName.ReadTransaction);
                    
                    threadData = new SharedThreadData(Convert.ToInt32(virtualuserId),this.TestContext);
                    threadData.UserName = localDictionary["UserName"];
                    threadData.Tenant = localDictionary["DBTenant"];
                    threadData.CustomerName = localDictionary["CustomerName"];
                    threadData.hasFullAccess = localDictionary["hasFullAccess"];
                    threadData.Password = AssemblyLoad.Password;
                    threadData.ScenarioPrefix = WebBTPrefix;
                    CustomDS.Instance.Save_ReadTransaction_UserData(Convert.ToInt32(virtualuserId), threadData, DBTenant);
                    Logger.WriteGeneralLogUser(TwinfieldScenarioName.ReadTransaction + " : " + DBTenant + " : LoggedIn : " + virtualuserId); 
                }
                catch (Exception ex)
                {

                    Logger.WriteGeneralLog("Input Data not fetched for:" + TwinfieldScenarioName.ReadTransaction);
                    throw new Exception("Error in reading data for " + TwinfieldScenarioName.ReadTransaction + " : " + ex.Message);

                }
                if(threadData.hasFullAccess=="0")
                {
                    foreach (var request in webTest.Login_WebAPI(threadData, objPlugin)) yield return request;
                }
                else
                {
                    foreach (var request in webTest.Login_WebAPI(threadData, objPlugin)) yield return request;
                }
                //RTMonitor.Write(Color.Green, "Create Invoice Login User: " + threadData.UserName + "with iteration no :" + threadData.iterationCount + " LoginTime: " + DateTime.Now + "\r\n");
                CustomDS.Instance.Save_ReadTransaction_UserData(Convert.ToInt32(virtualuserId), threadData, DBTenant);
                //Logger.WriteGeneralLog("Create Invoice : Vuser - " + Convert.ToInt32(virtualuserId).ToString() + " Logged In");
            }
            else
            {
                try
                {
                    threadData = CustomDS.Instance.Get_ReadTransaction_UserData(Convert.ToInt32(virtualuserId), DBTenant);
                    Logger.WriteGeneralLogUser(TwinfieldScenarioName.ReadTransaction + " : " + DBTenant + " : NotLoggedIn : " + virtualuserId);

                }
                catch (Exception ex)
                {

                    Logger.WriteGeneralLog("Input Data not saved for :" + TwinfieldScenarioName.ReadTransaction);
                    throw new Exception("Error in getting data for " + TwinfieldScenarioName.ReadTransaction + " : " + ex.Message);

                }
            }
            #endregion DoLogin

            WebBTPrefix = threadData.ScenarioPrefix;
            string WebRequestPrefix = "";
            
            string SessionID = webTest.Context["SessionID"].ToString();
            string UserDetailsFromFile = System.IO.File.ReadAllText("ReadTransactionData.txt");
            string encUserDetailsFromFile = HttpUtility.HtmlEncode(UserDetailsFromFile);
            string FromDate = DateTime.Now.AddYears(-5).ToString("yyyy/MM");
            string ToDate = DateTime.Now.ToString("yyyy/MM");
            //Replacing the XML file contents to have the dynamic data 
            encUserDetailsFromFile = encUserDetailsFromFile.Replace("{FromDate}", FromDate);
            encUserDetailsFromFile = encUserDetailsFromFile.Replace("{ToDate}", ToDate);

            string ReadData = @"<?xml version=""1.0"" encoding=""utf-8""?><soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema""><soap:Header><Header xmlns=""http://www.twinfield.com/""><SessionID>" + SessionID + @"</SessionID><CompanyId xsi:nil=""true"" /></Header></soap:Header><soap:Body><ProcessXmlString xmlns=""http://www.twinfield.com/""><xmlRequest>" + encUserDetailsFromFile + "</xmlRequest></ProcessXmlString></soap:Body></soap:Envelope>";

            Thread.Sleep(2000);

            #region RT_ReadTransactionXML
            webTest.BeginTransaction(WebBTPrefix + "RT_ReadTransactionXML");
            WebRequestPrefix = "RTX_";

            webTest.BeginTransaction(WebRequestPrefix + "webservices_processxml");
            WebTestRequest request2 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/webservices/processxml.asmx"));
            request2.Timeout = 60;
            request2.Method = "POST";
            request2.Headers.Add(new WebTestRequestHeader("Content-Type", "text/xml; charset=utf-8"));
            request2.Headers.Add(new WebTestRequestHeader("SOAPAction", "\"http://www.twinfield.com/ProcessXmlString\""));
            StringHttpBody request2Body = new StringHttpBody();
            request2Body.ContentType = "text/xml; charset=utf-8";
            request2Body.InsertByteOrderMark = false;
            request2Body.BodyString = ReadData;
            #region BodySTring
            //"<?xml version=\"1.0\" encoding=\"utf-8\"?><soap:Envelope xmlns:soap=\"http://schemas.x" +
            //		"mlsoap.org/soap/envelope/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"><soap:Header><Header xmlns=\"http:/" +
            //		"/www.twinfield.com/\"><SessionID>" + SessionID + "</SessionID>" +
            //		"<CompanyId xsi:nil=\"true\" /></Header></soap:Header><soap:Body><ProcessXmlString" +
            //		"xmlns=\"http://www.twinfield.com/\"><xmlRequest>&lt;columns code=\"020\"&gt;\n&" +
            //		"lt;column id=\"1\"&gt;\n&lt;field&gt;fin.trs.head.yearperiod&lt;/field&gt;" +
            //		"\n&lt;label&gt;Period&lt;/label&gt;\n&lt;visible&gt;true&lt;/vis" +
            //		"ible&gt;\n&lt;ask&gt;true&lt;/ask&gt;\n&lt;operator&gt;between&l" +
            //		"t;/operator&gt;\n&lt;from&gt;2001/01&lt;/from&gt;\n&lt;to&gt;201" +
            //		"8/08&lt;/to&gt;\n&lt;finderparam&gt;&lt;/finderparam&gt;\n&lt;/colu" +
            //		"mn&gt;\n&lt;column id=\"2\"&gt;\n&lt;field&gt;fin.trs.head.code&lt;/f" +
            //		"ield&gt;\n&lt;label&gt;Transaction type&lt;/label&gt;\n&lt;visib" +
            //		"le&gt;true&lt;/visible&gt;\n&lt;ask&gt;true&lt;/ask&gt;\n&lt;ope" +
            //		"rator&gt;equal&lt;/operator&gt;\n&lt;from&gt;&lt;/from&gt;\n&lt;" +
            //		"to&gt;&lt;/to&gt;\n&lt;finderparam&gt;hidden=1&lt;/finderparam&gt;\n" +
            //		"&lt;/column&gt;\n&lt;column id=\"3\"&gt;\n&lt;field&gt;fin.trs.head." +
            //		"shortname&lt;/field&gt;\n&lt;label&gt;Name&lt;/label&gt;\n&lt;vi" +
            //		"sible&gt;true&lt;/visible&gt;\n&lt;ask&gt;false&lt;/ask&gt;\n&lt" +
            //		";operator&gt;none&lt;/operator&gt;\n&lt;from&gt;&lt;/from&gt;\n&" +
            //		"lt;to&gt;&lt;/to&gt;\n&lt;finderparam&gt;&lt;/finderparam&gt;\n&lt;" +
            //		"/column&gt;\n&lt;column id=\"4\"&gt;\n&lt;field&gt;fin.trs.head.numbe" +
            //		"r&lt;/field&gt;\n&lt;label&gt;Trans. no.&lt;/label&gt;\n&lt;visi" +
            //		"ble&gt;true&lt;/visible&gt;\n&lt;ask&gt;true&lt;/ask&gt;\n&lt;op" +
            //		"erator&gt;between&lt;/operator&gt;\n&lt;from&gt;&lt;/from&gt;\n&" +
            //		"lt;to&gt;&lt;/to&gt;\n&lt;finderparam&gt;&lt;/finderparam&gt;\n&lt;" +
            //		"/column&gt;\n&lt;column id=\"5\"&gt;\n&lt;field&gt;fin.trs.head.statu" +
            //		"s&lt;/field&gt;\n&lt;label&gt;Status&lt;/label&gt;\n&lt;visible&" +
            //		"gt;true&lt;/visible&gt;\n&lt;ask&gt;true&lt;/ask&gt;\n&lt;operat" +
            //		"or&gt;equal&lt;/operator&gt;\n&lt;from&gt;normal&lt;/from&gt;\n&" +
            //		"lt;to&gt;&lt;/to&gt;\n&lt;finderparam&gt;&lt;/finderparam&gt;\n&lt;" +
            //		"/column&gt;\n&lt;column id=\"6\"&gt;\n&lt;field&gt;fin.trs.head.date&" +
            //		"lt;/field&gt;\n&lt;label&gt;Trans.date&lt;/label&gt;\n&lt;visib" +
            //		"le&gt;true&lt;/visible&gt;\n&lt;ask&gt;true&lt;/ask&gt;\n&lt;ope" +
            //		"rator&gt;between&lt;/operator&gt;\n&lt;from&gt;&lt;/from&gt;\n&l" +
            //		"t;to&gt;&lt;/to&gt;\n&lt;finderparam&gt;&lt;/finderparam&gt;\n&lt;/" +
            //		"column&gt;\n&lt;column id=\"7\"&gt;\n&lt;field&gt;fin.trs.head.inpdat" +
            //		"e&lt;/field&gt;\n&lt;label&gt;Date of entry&lt;/label&gt;\n&lt;v" +
            //		"isible&gt;false&lt;/visible&gt;\n&lt;ask&gt;true&lt;/ask&gt;\n&l" +
            //		"t;operator&gt;between&lt;/operator&gt;\n&lt;from&gt;&lt;/from&gt;\n" +
            //		"&lt;to&gt;&lt;/to&gt;\n&lt;finderparam&gt;&lt;/finderparam&gt;\n" +
            //		"&lt;/column&gt;\n&lt;column id=\"8\"&gt;\n&lt;field&gt;fin.trs.head.m" +
            //		"odified&lt;/field&gt;\n&lt;label&gt;Modification date&lt;/label&gt;\n" +
            //		"&lt;visible&gt;false&lt;/visible&gt;\n&lt;ask&gt;true&lt;/ask&gt;\n" +
            //		"&lt;operator&gt;between&lt;/operator&gt;\n&lt;from&gt;&lt;/from&" +
            //		"gt;\n&lt;to&gt;&lt;/to&gt;\n&lt;finderparam&gt;&lt;/finderparam&" +
            //		"gt;\n&lt;/column&gt;\n&lt;column id=\"9\"&gt;\n&lt;field&gt;fin." +
            //		"trs.line.dim1&lt;/field&gt;\n&lt;label&gt;General ledger&lt;/label&gt;\n" +
            //		"&lt;visible&gt;true&lt;/visible&gt;\n&lt;ask&gt;true&lt;/ask&gt;" +
            //		"\n&lt;operator&gt;between&lt;/operator&gt;\n&lt;from&gt;&lt;/fro" +
            //		"m&gt;\n&lt;to&gt;&lt;/to&gt;\n&lt;finderparam&gt;&lt;/finderpara" +
            //		"m&gt;\n&lt;/column&gt;\n&lt;column id=\"10\"&gt;\n&lt;field&gt;f" +
            //		"in.trs.line.dim2&lt;/field&gt;\n&lt;label&gt;Cust./supp.&lt;/label&gt;\n " +
            //		"&lt;visible&gt;true&lt;/visible&gt;\n&lt;ask&gt;true&lt;/ask&gt;" +
            //		"\n&lt;operator&gt;between&lt;/operator&gt;\n&lt;from&gt;&lt;/fro" +
            //		"m&gt;\n&lt;to&gt;&lt;/to&gt;\n&lt;finderparam&gt;&lt;/finderpara" +
            //		"m&gt;\n&lt;/column&gt;\n&lt;column id=\"11\"&gt;\n&lt;field&gt;f" +
            //		"in.trs.line.dim3&lt;/field&gt;\n&lt;label&gt;Project&lt;/label&gt;\n" +
            //		"&lt;visible&gt;true&lt;/visible&gt;\n&lt;ask&gt;true&lt;/ask&gt;\n" +
            //		"&lt;operator&gt;between&lt;/operator&gt;\n&lt;from&gt;&lt;/from&gt" +
            //		";\n&lt;to&gt;&lt;/to&gt;\n&lt;finderparam&gt;&lt;/finderparam&gt" +
            //		";\n&lt;/column&gt;\n&lt;column id=\"12\"&gt;\n&lt;field&gt;fin.t" +
            //		"rs.head.curcode&lt;/field&gt;\n&lt;label&gt;Currency&lt;/label&gt;\n     " +
            //		"&lt;visible&gt;true&lt;/visible&gt;\n&lt;ask&gt;true&lt;/ask&gt;\n   " +
            //		"&lt;operator&gt;equal&lt;/operator&gt;\n&lt;from&gt;&lt;/from&gt;\n" +
            //		"&lt;to&gt;&lt;/to&gt;\n&lt;finderparam&gt;&lt;/finderparam&gt;\n" +
            //		"&lt;/column&gt;\n&lt;column id=\"13\"&gt;\n&lt;field&gt;fin.trs" +
            //		".line.valuesigned&lt;/field&gt;\n&lt;label&gt;Value&lt;/label&gt;\n" +
            //		"&lt;visible&gt;true&lt;/visible&gt;\n&lt;ask&gt;true&lt;/ask&gt;\n" +
            //		"&lt;operator&gt;between&lt;/operator&gt;\n&lt;from&gt;&lt;/from&gt;" +
            //		"\n&lt;to&gt;&lt;/to&gt;\n&lt;finderparam&gt;&lt;/finderparam&gt;" +
            //		"\n&lt;/column&gt;\n&lt;column id=\"14\"&gt;\n&lt;field&gt;fin.tr" +
            //		"s.line.basevaluesigned&lt;/field&gt;\n&lt;label&gt;Euro&lt;/label&gt;\n" +
            //		"&lt;visible&gt;true&lt;/visible&gt;\n&lt;ask&gt;true&lt;/ask&gt;\n" +
            //		"&lt;operator&gt;between&lt;/operator&gt;\n&lt;from&gt;&lt;/from" +
            //		"&gt;\n&lt;to&gt;&lt;/to&gt;\n&lt;finderparam&gt;&lt;/finderparam" +
            //		"&gt;\n&lt;/column&gt;\n&lt;column id=\"15\"&gt;\n&lt;field&gt;fi" +
            //		"n.trs.line.repvaluesigned&lt;/field&gt;\n&lt;label&gt;&lt;/label&gt;\n   " +
            //		"&lt;visible&gt;false&lt;/visible&gt;\n&lt;ask&gt;false&lt;/ask&gt;" +
            //		"\n&lt;operator&gt;between&lt;/operator&gt;\n&lt;from&gt;&lt;/fro" +
            //		"m&gt;\n&lt;to&gt;&lt;/to&gt;\n&lt;finderparam&gt;&lt;/finderpara" +
            //		"m&gt;\n&lt;/column&gt;\n&lt;column id=\"16\"&gt;\n&lt;field&gt;f" +
            //		"in.trs.line.invnumber&lt;/field&gt;\n&lt;label&gt;Invoice no.&lt;/label&" +
            //		"gt;\n&lt;visible&gt;true&lt;/visible&gt;\n&lt;ask&gt;true&lt;/as" +
            //		"k&gt;\n&lt;operator&gt;equal&lt;/operator&gt;\n&lt;from&gt;&lt;/" +
            //		"from&gt;\n&lt;to&gt;&lt;/to&gt;\n&lt;finderparam&gt;&lt;/finderp" +
            //		"aram&gt;\n&lt;/column&gt;\n&lt;column id=\"17\"&gt;\n&lt;field&g" +
            //		"t;fin.trs.head.user&lt;/field&gt;\n&lt;label&gt;User&lt;/label&gt;\n" +
            //		"&lt;visible&gt;false&lt;/visible&gt;\n&lt;ask&gt;true&lt;/ask&gt;\n  " +
            //		"&lt;operator&gt;equal&lt;/operator&gt;\n&lt;from&gt;&lt;/from&gt;" +
            //		"\n&lt;to&gt;&lt;/to&gt;\n&lt;finderparam&gt;&lt;/finderparam&gt;" +
            //		"\n&lt;/column&gt;\n&lt;column id=\"18\"&gt;\n&lt;field&gt;fin.tr" +
            //		"s.head.inpdate&lt;/field&gt;\n&lt;label&gt;Date of entry&lt;/label&gt;\n " +
            //		"&lt;visible&gt;true&lt;/visible&gt;\n&lt;ask&gt;false&lt;/ask&gt" +
            //		";\n&lt;operator&gt;none&lt;/operator&gt;\n&lt;from&gt;&lt;/from&" +
            //		"gt;\n&lt;to&gt;&lt;/to&gt;\n&lt;finderparam&gt;&lt;/finderparam&" +
            //		"gt;\n&lt;/column&gt;\n&lt;column id=\"19\"&gt;\n&lt;field&gt;fin" +
            //		".trs.line.description&lt;/field&gt;\n&lt;label&gt;Description&lt;/label&" +
            //		"gt;\n&lt;visible&gt;true&lt;/visible&gt;\n&lt;ask&gt;false&lt;/a" +
            //		"sk&gt;\n&lt;operator&gt;none&lt;/operator&gt;\n&lt;from&gt;&lt;/" +
            //		"from&gt;\n&lt;to&gt;&lt;/to&gt;\n&lt;finderparam&gt;&lt;/finderp" +
            //		"aram&gt;\n&lt;/column&gt;\n&lt;column id=\"20\"&gt;\n&lt;field&g" +
            //		"t;fin.trs.head.browseregime&lt;/field&gt;\n&lt;label&gt;Regime&lt;/label" +
            //		"&gt;\n&lt;visible&gt;true&lt;/visible&gt;\n&lt;ask&gt;true&lt;/a" +
            //		"sk&gt;\n&lt;operator&gt;equal&lt;/operator&gt;\n&lt;from&gt;&lt;" +
            //		"/from&gt;\n&lt;to&gt;&lt;/to&gt;\n&lt;finderparam&gt;&lt;/finder" +
            //		"param&gt;\n&lt;/column&gt;\n&lt;/columns&gt;</xmlRequest></ProcessXmlStri" +
            //		"ng></soap:Body></soap:Envelope>"; 
            #endregion
            request2.Body = request2Body;
            yield return request2;
            request2 = null;


            webTest.EndTransaction(WebRequestPrefix + "webservices_processxml");

            webTest.EndTransaction(WebBTPrefix + "RT_ReadTransactionXML");
            #endregion

            Thread.Sleep(2000);
            
            if ((Convert.ToInt32(webTest.Context["iterationNo"])% Convert.ToInt32(webTest.Context["maxiterationNo"])) ==0)
            {
                foreach (var request in webTest.Logout_WebAPI(threadData, objPlugin)) yield return request;
                //RTMonitor.Write(Color.Green, "User Logout: " + threadData.UserName + " LogOutTime: " + DateTime.Now + "\r\n");
                Thread.Sleep(2000);
            }
        }
        
    }
    public class ReadTransaction_A : WebTest
    {
        ReadTransaction _ReadTransaction = null;
        WebTestRequestPlugin objPlugin = new WebTestRequestPlugin();
        private WebTestContext _textContext;
        public ReadTransaction_A()
        {
            if (_ReadTransaction == null)
                _ReadTransaction = new ReadTransaction(this);


            this.Context.Add("LoginMain", AssemblyLoad.LoginMain);
            this.Context.Add("AccountingURL", AssemblyLoad.AccountingURL);
            this.Context.Add("TwfcndURL", AssemblyLoad.TwfcndURL);
            this.PreAuthenticate = true;
            this.Proxy = "default";
            this.StopOnError = true;
            _textContext = this.Context;

            this.PreWebTest += TwinfieldWebLoadTestPlugin.PreWebTestEvent;
            this.PreRequest += objPlugin.Test_PreRequest;
            this.PostRequest += objPlugin.Test_PostRequest;
        }

        public override IEnumerator<WebTestRequest> GetRequestEnumerator()
        {
            _textContext= this._textContext;
            return _ReadTransaction.GetRequestEnumerator(TwinfieldDBTenant.A, Context.WebTestUserId.ToString(), objPlugin);
        }
    }

    public class ReadTransaction_B : WebTest
    {
        ReadTransaction _ReadTransaction = null;
        WebTestRequestPlugin objPlugin = new WebTestRequestPlugin();
        private WebTestContext _textContext;
        public ReadTransaction_B()
        {
            if (_ReadTransaction == null)
                _ReadTransaction = new ReadTransaction(this);


            this.Context.Add("LoginMain", AssemblyLoad.LoginMain);
            this.Context.Add("AccountingURL", AssemblyLoad.AccountingURL);
            this.Context.Add("TwfcndURL", AssemblyLoad.TwfcndURL);
            this.PreAuthenticate = true;
            this.Proxy = "default";
            this.StopOnError = true;
            _textContext = this.Context;

            this.PreWebTest += TwinfieldWebLoadTestPlugin.PreWebTestEvent;
            this.PreRequest += objPlugin.Test_PreRequest;
            this.PostRequest += objPlugin.Test_PostRequest;
        }

        public override IEnumerator<WebTestRequest> GetRequestEnumerator()
        {
            _textContext = this._textContext;
            return _ReadTransaction.GetRequestEnumerator(TwinfieldDBTenant.B, Context.WebTestUserId.ToString(), objPlugin);
        }
    }

    public class ReadTransaction_C : WebTest
    {
        ReadTransaction _ReadTransaction = null;
        WebTestRequestPlugin objPlugin = new WebTestRequestPlugin();
        private WebTestContext _textContext;
        public ReadTransaction_C()
        {
            if (_ReadTransaction == null)
                _ReadTransaction = new ReadTransaction(this);


            this.Context.Add("LoginMain", AssemblyLoad.LoginMain);
            this.Context.Add("AccountingURL", AssemblyLoad.AccountingURL);
            this.Context.Add("TwfcndURL", AssemblyLoad.TwfcndURL);
            this.PreAuthenticate = true;
            this.Proxy = "default";
            this.StopOnError = true;
            _textContext = this.Context;

            this.PreWebTest += TwinfieldWebLoadTestPlugin.PreWebTestEvent;
            this.PreRequest += objPlugin.Test_PreRequest;
            this.PostRequest += objPlugin.Test_PostRequest;
        }

        public override IEnumerator<WebTestRequest> GetRequestEnumerator()
        {
            _textContext = this._textContext;
            return _ReadTransaction.GetRequestEnumerator(TwinfieldDBTenant.C, Context.WebTestUserId.ToString(), objPlugin);
        }
    }

    public class ReadTransaction_D : WebTest
    {
        ReadTransaction _ReadTransaction = null;
        WebTestRequestPlugin objPlugin = new WebTestRequestPlugin();
        private WebTestContext _textContext;
        public ReadTransaction_D()
        {
            if (_ReadTransaction == null)
                _ReadTransaction = new ReadTransaction(this);


            this.Context.Add("LoginMain", AssemblyLoad.LoginMain);
            this.Context.Add("AccountingURL", AssemblyLoad.AccountingURL);
            this.Context.Add("TwfcndURL", AssemblyLoad.TwfcndURL);
            this.PreAuthenticate = true;
            this.Proxy = "default";
            this.StopOnError = true;
            _textContext = this.Context;

            this.PreWebTest += TwinfieldWebLoadTestPlugin.PreWebTestEvent;
            this.PreRequest += objPlugin.Test_PreRequest;
            this.PostRequest += objPlugin.Test_PostRequest;
        }

        public override IEnumerator<WebTestRequest> GetRequestEnumerator()
        {
            _textContext = this._textContext;
            return _ReadTransaction.GetRequestEnumerator(TwinfieldDBTenant.D, Context.WebTestUserId.ToString(), objPlugin);
        }
    }

    public class ReadTransaction_E : WebTest
    {
        ReadTransaction _ReadTransaction = null;
        WebTestRequestPlugin objPlugin = new WebTestRequestPlugin();
        private WebTestContext _textContext;
        public ReadTransaction_E()
        {
            if (_ReadTransaction == null)
                _ReadTransaction = new ReadTransaction(this);


            this.Context.Add("LoginMain", AssemblyLoad.LoginMain);
            this.Context.Add("AccountingURL", AssemblyLoad.AccountingURL);
            this.Context.Add("TwfcndURL", AssemblyLoad.TwfcndURL);
            this.PreAuthenticate = true;
            this.Proxy = "default";
            this.StopOnError = true;
            _textContext = this.Context;

            this.PreWebTest += TwinfieldWebLoadTestPlugin.PreWebTestEvent;
            this.PreRequest += objPlugin.Test_PreRequest;
            this.PostRequest += objPlugin.Test_PostRequest;
        }

        public override IEnumerator<WebTestRequest> GetRequestEnumerator()
        {
            _textContext = this._textContext;
            return _ReadTransaction.GetRequestEnumerator(TwinfieldDBTenant.E, Context.WebTestUserId.ToString(), objPlugin);
        }
    }
}
