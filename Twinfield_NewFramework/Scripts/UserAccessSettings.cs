//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Twinfield_NewFramework
{
    using System;
    using System.Collections.Generic;
    using System.Text;
    using Microsoft.VisualStudio.TestTools.WebTesting;
    using Microsoft.VisualStudio.TestTools.WebTesting.Rules;
    using Newtonsoft.Json;
    using Microsoft.VisualStudio.TestTools.LoadTesting;
    //using MicrosoftServicesTestLabs.Monitor.VSTSUnitTest;
    using System.Drawing;
    using System.Threading;
    using System.Data;
    using System.Reflection;
    using System.Text.RegularExpressions;

    public class UserAccessSettings
    {
        WebTest webTest;
        private Dictionary<string, string> localDictionary;
        WebTestRequestPlugin objPlugin = new WebTestRequestPlugin();    //object of webTesRequestPlugin class to access the variables uniquely in each thread.
        private InputTableRecord testRecord;
        public Object assemblyinitializeLock = new Object();
        private WebTestContext _textContext;
        private object virtualuserId;
        private object doLogin;
        string OfficeManagementID = string.Empty;
        private string companyTypeDescription;

        public UserAccessSettings(WebTest webTest)
        {
            this.webTest = webTest;
            
        }
        public WebTestContext TestContext
        {
            get { return _textContext; }

            set { _textContext = value; }
        }
        
        public IEnumerator<WebTestRequest> GetRequestEnumerator(TwinfieldDBTenant DBTenant,string userDictionaryKey, WebTestRequestPlugin objPlugin)
        {
            var WebBTPrefix = TwinfieldScenarioPrefix.UAS_ + DBTenant.ToString() + "_";
            _textContext = webTest.Context;
            _textContext.TryGetValue("doLogin", out doLogin);
            _textContext.TryGetValue("UserId", out virtualuserId);

            SharedThreadData threadData;

            #region DoLogin
            if (Convert.ToBoolean(doLogin))
            {
                webTest.Context.CookieContainer = new System.Net.CookieContainer();

                try
                {
                    localDictionary = CustomDS.Instance.GetNextRowTwinfield(DBTenant, TwinfieldScenarioName.UserAccessSettings);
                    
                    threadData = new SharedThreadData(Convert.ToInt32(virtualuserId),this.TestContext);
                    threadData.UserName = localDictionary["UserName"];
                    threadData.Tenant = localDictionary["DBTenant"];
                    threadData.CustomerName = localDictionary["CustomerName"];
                    threadData.hasFullAccess = localDictionary["hasFullAccess"];
                    threadData.Password = AssemblyLoad.Password;
                    threadData.ScenarioPrefix = WebBTPrefix;
                    CustomDS.Instance.Save_UserAccessSettings_UserData(Convert.ToInt32(virtualuserId), threadData, DBTenant);
                    Logger.WriteGeneralLogUser(TwinfieldScenarioName.UserAccessSettings + " : " + DBTenant + " : LoggedIn : " + virtualuserId); 
                }
                catch (Exception ex)
                {

                    Logger.WriteGeneralLog("Input Data not fetched for:" + TwinfieldScenarioName.UserAccessSettings);
                    throw new Exception("Error in reading data for " + TwinfieldScenarioName.UserAccessSettings + " : " + ex.Message);

                }
                if(threadData.hasFullAccess=="0")
                {
                    foreach (var request in webTest.LaunchLogin(threadData, objPlugin)) yield return request;
                }
                else
                {
                    foreach (var request in webTest.LaunchLogin_FullAccess(threadData, objPlugin)) yield return request;
                }
                //RTMonitor.Write(Color.Green, "Create Invoice Login User: " + threadData.UserName + "with iteration no :" + threadData.iterationCount + " LoginTime: " + DateTime.Now + "\r\n");
                CustomDS.Instance.Save_UserAccessSettings_UserData(Convert.ToInt32(virtualuserId), threadData, DBTenant);
                //Logger.WriteGeneralLog("Create Invoice : Vuser - " + Convert.ToInt32(virtualuserId).ToString() + " Logged In");
            }
            else
            {
                try
                {
                    threadData = CustomDS.Instance.Get_UserAccessSettings_UserData(Convert.ToInt32(virtualuserId), DBTenant);
                    Logger.WriteGeneralLogUser(TwinfieldScenarioName.UserAccessSettings + " : " + DBTenant + " : NotLoggedIn : " + virtualuserId);

                }
                catch (Exception ex)
                {

                    Logger.WriteGeneralLog("Input Data not saved for :" + TwinfieldScenarioName.UserAccessSettings);
                    throw new Exception("Error in getting data for " + TwinfieldScenarioName.UserAccessSettings + " : " + ex.Message);

                }
            }
            #endregion DoLogin

            WebBTPrefix = threadData.ScenarioPrefix;
            string WebRequestPrefix = "";


            #region UAS_GoToUserAccessSettings
            webTest.BeginTransaction(WebBTPrefix + "GoToUserAccessSettings");
            WebRequestPrefix = "GTUAS_";
            
            webTest.BeginTransaction(WebRequestPrefix + "UI");
            WebTestRequest request185 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/UI/"));
            request185.ExpectedResponseUrl = (webTest.Context["AccountingURL"].ToString() + "/UI/#/Settings/Access");
            yield return request185;
            request185 = null;
            webTest.EndTransaction(WebRequestPrefix + "UI");

            webTest.BeginTransaction(WebRequestPrefix + "en-GB_settings_access_access.html");
            WebTestRequest request186 = new WebTestRequest((webTest.Context["TwfcndURL"].ToString() + "/" + threadData.BuildVersion + "/en-GB/settings/access/access.html"));
            request186.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/plain, */*;version=latest"));
            request186.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request186;
            request186 = null;
            webTest.EndTransaction(WebRequestPrefix + "en-GB_settings_access_access.html");

            webTest.BeginTransaction(WebRequestPrefix + "framework_desktop_view_cr-basic-group-tile.html");
            WebTestRequest request187 = new WebTestRequest((webTest.Context["TwfcndURL"].ToString() + "/" + threadData.BuildVersion + "/en-GB/_components/framework/desktop/view/cr-basic-group-tile.html"));
            request187.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/plain, */*;version=latest"));
            request187.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request187;
            request187 = null;
            webTest.EndTransaction(WebRequestPrefix + "framework_desktop_view_cr-basic-group-tile.html");

            webTest.BeginTransaction(WebRequestPrefix + "framework_desktop_view_cr-links-tile.html");
            WebTestRequest request188 = new WebTestRequest((webTest.Context["TwfcndURL"].ToString() + "/" + threadData.BuildVersion + "/en-GB/_components/framework/desktop/view/cr-links-tile.html"));
            request188.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/plain, */*;version=latest"));
            request188.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request188;
            request188 = null;
            webTest.EndTransaction(WebRequestPrefix + "framework_desktop_view_cr-links-tile.html");

            webTest.BeginTransaction(WebRequestPrefix + "api_tasks");
            WebTestRequest request189 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/tasks"));
            request189.Headers.Add(new WebTestRequestHeader("Accept", "application/vnd.twinfield+json;version=latest"));
            request189.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request189;
            request189 = null;
            webTest.EndTransaction(WebRequestPrefix + "api_tasks");

            webTest.EndTransaction(WebBTPrefix + "GoToUserAccessSettings");
            #endregion

            #region UAS_ClickOnUsers
            webTest.BeginTransaction(WebBTPrefix + "ClickOnUsers");
            WebRequestPrefix = "COU_";

            webTest.BeginTransaction(WebRequestPrefix + "en-GB_home_classic_classic.html");
            WebTestRequest request190 = new WebTestRequest((webTest.Context["TwfcndURL"].ToString() + "/" + threadData.BuildVersion + "/en-GB/home/classic/classic.html"));
            request190.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/plain, */*;version=latest"));
            request190.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request190;
            request190 = null;
            webTest.EndTransaction(WebRequestPrefix + "en-GB_home_classic_classic.html");

            webTest.BeginTransaction(WebRequestPrefix + "masters_user_default.aspx");
            WebTestRequest request191 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/masters/user/default.aspx"));
            request191.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request191;
            request191 = null;
            webTest.EndTransaction(WebRequestPrefix + "masters_user_default.aspx");

            webTest.BeginTransaction(WebRequestPrefix + "api_tasks_1");
            WebTestRequest request192 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/tasks"));
            request192.Headers.Add(new WebTestRequestHeader("Accept", "application/vnd.twinfield+json;version=latest"));
            request192.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            yield return request192;
            request192 = null;
            webTest.EndTransaction(WebRequestPrefix + "api_tasks_1");

            webTest.BeginTransaction(WebRequestPrefix + "finder_default.aspx");
            WebTestRequest request193 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/finder/default.aspx"));
            request193.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/plain, */*"));
            request193.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/masters/user/default.aspx")));
            request193.QueryStringParameters.Add("accessrules", "1", false, false);
            request193.QueryStringParameters.Add("mutualoffices", "1", false, false);
            request193.QueryStringParameters.Add("page", "0", false, false);
            request193.QueryStringParameters.Add("pattern", "", false, false);
            request193.QueryStringParameters.Add("type", "USR", false, false);
            yield return request193;
            request193 = null;
            webTest.EndTransaction(WebRequestPrefix + "finder_default.aspx");

            webTest.EndTransaction(WebBTPrefix + "ClickOnUsers");
            #endregion

            //Random user name 

            string CreateUserName = Guid.NewGuid().ToString("n").Substring(0, 4);

            string PassCreateName = "Perf_" + CreateUserName;

            #region UAS_CreateUser
            webTest.BeginTransaction(WebBTPrefix + "CreateUser");
            WebRequestPrefix = "CU_";

            webTest.BeginTransaction(WebRequestPrefix + "finder_default.aspx_1");
            WebTestRequest request194 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/finder/default.aspx"));
            request194.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/plain, */*"));
            request194.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/masters/user/default.aspx")));
            request194.QueryStringParameters.Add("accessrules", "1", false, false);
            request194.QueryStringParameters.Add("mutualoffices", "1", false, false);
            request194.QueryStringParameters.Add("page", "0", false, false);
            request194.QueryStringParameters.Add("pattern", PassCreateName, false, false);
            request194.QueryStringParameters.Add("type", "USR", false, false);
            yield return request194;
            request194 = null;
            webTest.EndTransaction(WebRequestPrefix + "finder_default.aspx_1");
            
            webTest.BeginTransaction(WebRequestPrefix + "masters_user_overview.aspx");
            WebTestRequest request152 = new WebTestRequest(webTest.Context["AccountingURL"].ToString() + "/masters/user/overview.aspx");
            request152.Method = "POST";
            request152.Headers.Add(new WebTestRequestHeader("Referer", webTest.Context["AccountingURL"].ToString() + "/masters/user/default.aspx"));
            FormPostHttpBody request152Body = new FormPostHttpBody();
            request152Body.FormPostParameters.Add("txtCode", PassCreateName);
            request152Body.FormPostParameters.Add("btnNext.x", "Next >");
            //request152Body.FormPostParameters.Add("__ncforminfo", webTest.Context["$HIDDEN1.__ncforminfo"].ToString());
            request152.Body = request152Body;
            ExtractHiddenFields extractionRule3 = new ExtractHiddenFields();
            extractionRule3.Required = true;
            extractionRule3.HtmlDecode = true;
            extractionRule3.ContextParameterName = "1";
            request152.ExtractValues += new EventHandler<ExtractionEventArgs>(extractionRule3.Extract);
            yield return request152;
            request152 = null;
            webTest.EndTransaction(WebRequestPrefix + "masters_user_overview.aspx");
            
            webTest.EndTransaction(WebBTPrefix + "CreateUser");
            #endregion

            #region UAS_GoToCompaniesTab
            webTest.BeginTransaction(WebBTPrefix + "GoToCompaniesTab");
            WebRequestPrefix = "GTCT_";
            
            webTest.BeginTransaction(WebRequestPrefix + "masters_user_overview.aspx_1");
            WebTestRequest request155 = new WebTestRequest(webTest.Context["AccountingURL"].ToString() + "/masters/user/overview.aspx");
            request155.Method = "POST";
            request155.Headers.Add(new WebTestRequestHeader("Referer", webTest.Context["AccountingURL"].ToString() + "/masters/user/overview.aspx"));
            FormPostHttpBody request155Body = new FormPostHttpBody();
            request155Body.FormPostParameters.Add("txtCode", PassCreateName);
            request155Body.FormPostParameters.Add("txtName", PassCreateName);
            request155Body.FormPostParameters.Add("txtShortName", PassCreateName);
            request155Body.FormPostParameters.Add("txtPassword1", "Twinfield01");
            request155Body.FormPostParameters.Add("txtPassword2", "Twinfield01");
            request155Body.FormPostParameters.Add("txtEmail", "testcollect@twinfield.com");
            request155Body.FormPostParameters.Add("lstCulture", "en-GB");
            request155Body.FormPostParameters.Add("txtFreetext1", "");
            request155Body.FormPostParameters.Add("txtFreetext2", "");
            request155Body.FormPostParameters.Add("txtFreetext3", "");
            request155Body.FormPostParameters.Add("lstRole", "LVL1");//"BOX");// 
            request155Body.FormPostParameters.Add("lstType", "accountant");
            request155Body.FormPostParameters.Add("chkAcceptExtraCost", "1");
            request155Body.FormPostParameters.Add("selectedAcceptExtraCost", "1");
            request155Body.FormPostParameters.Add("smsPhoneNumber", "");
            request155Body.FormPostParameters.Add("txtQuota", "");
            request155Body.FormPostParameters.Add("txtFMQuota", "5");
            request155Body.FormPostParameters.Add("txtTab", "tabOffices");
            request155Body.FormPostParameters.Add("txtPrevTab", webTest.Context["$HIDDEN1.txtPrevTab"].ToString());
            request155Body.FormPostParameters.Add("id", webTest.Context["$HIDDEN1.id"].ToString());
            request155Body.FormPostParameters.Add("hdnRole", webTest.Context["$HIDDEN1.hdnRole"].ToString());
            request155Body.FormPostParameters.Add("txtDejavu", webTest.Context["$HIDDEN1.txtDejavu"].ToString());
            request155Body.FormPostParameters.Add("lstOfficeSort", webTest.Context["$HIDDEN1.lstOfficeSort"].ToString());
            //request155Body.FormPostParameters.Add("__ncforminfo", webTest.Context["$HIDDEN1.__ncforminfo"].ToString());
            request155.Body = request155Body;
            ExtractHiddenFields extractionRule4 = new ExtractHiddenFields();
            extractionRule4.Required = true;
            extractionRule4.HtmlDecode = true;
            extractionRule4.ContextParameterName = "0";
            request155.ExtractValues += new EventHandler<ExtractionEventArgs>(extractionRule4.Extract);
            ExtractText extractionRule111 = new ExtractText();
            extractionRule111.StartsWith = "<SELECT NAME=\"lstAvailable\"";
            extractionRule111.EndsWith = "</SELECT>";
            extractionRule111.Index = 0;
            extractionRule111.IgnoreCase = false;
            extractionRule111.UseRegularExpression = false;
            extractionRule111.HtmlDecode = true;
            extractionRule111.Required = false;
            extractionRule111.ContextParameterName = "AllCompanies";
            request155.ExtractValues += new EventHandler<ExtractionEventArgs>(extractionRule111.Extract);

            yield return request155;
            request155 = null;
            webTest.EndTransaction(WebRequestPrefix + "masters_user_overview.aspx_1");


            string AllCompanies = webTest.Context["AllCompanies"].ToString();
            string StartString = "<OPTION VALUE=\"";
            string EndString = "\">";
            int OptionCount = Regex.Matches(AllCompanies, "<OPTION VALUE=\"").Count;
            string[] matchFound = CommonFunctions.GetBetween(AllCompanies, StartString, EndString, OptionCount);

            string listofCompanies = string.Empty;

            for (int i = 0; i < OptionCount; i++)
            {
                listofCompanies = listofCompanies + matchFound[i] + ";";
            }

            webTest.EndTransaction(WebBTPrefix + "GoToCompaniesTab");

            #endregion

            #region UAS_SelectAccessToAllCompanies
            webTest.BeginTransaction(WebBTPrefix + "SelectAccessToAllCompanies");
            WebRequestPrefix = "SATAC_";

            //WebTestRequest request206 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/api/notifications"));
            //request206.Headers.Add(new WebTestRequestHeader("Accept", "application/vnd.twinfield+json;version=latest"));
            //request206.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/UI/")));
            //request206.QueryStringParameters.Add("since", "2018-08-14T12:19:03.336Z", false, false);
            //yield return request206;
            //request206 = null;

            webTest.EndTransaction(WebBTPrefix + "SelectAccessToAllCompanies");
            #endregion

            #region UAS_SaveUser
            webTest.BeginTransaction(WebBTPrefix + "SaveUser");
            WebRequestPrefix = "SU_";
            
            string[] Companyy = listofCompanies.Split(';');
            string CompanyToPass = string.Empty;
            foreach (string word in Companyy)
            {
                CompanyToPass += word;
            }

            webTest.BeginTransaction(WebRequestPrefix + "masters_user_overview.aspx_2");
            WebTestRequest request159 = new WebTestRequest(webTest.Context["AccountingURL"].ToString() + "/masters/user/overview.aspx");
            request159.Method = "POST";
            request159.ExpectedResponseUrl = webTest.Context["AccountingURL"].ToString() + "/masters/user/default.aspx?code=" + PassCreateName +
                "&name=" + PassCreateName + "&msg=saveok";
            request159.Headers.Add(new WebTestRequestHeader("Referer", webTest.Context["AccountingURL"].ToString() + "/masters/user/overview.aspx"));
            FormPostHttpBody request159Body = new FormPostHttpBody();
            request159Body.FormPostParameters.Add("txtCode", webTest.Context["$HIDDEN0.txtCode"].ToString());
            request159Body.FormPostParameters.Add("radRestricted", webTest.Context["$HIDDEN0.radRestricted"].ToString());
            request159Body.FormPostParameters.Add("txtSearchSelected", "Finderï¿½");
            request159Body.FormPostParameters.Add("txtSearchAvailable", "Finderï¿½");
            request159Body.FormPostParameters.Add("lstSelected", CompanyToPass);
            request159Body.FormPostParameters.Add("lstOfficeSort", webTest.Context["$HIDDEN1.lstOfficeSort"].ToString());
            request159Body.FormPostParameters.Add("txtSelected", listofCompanies);
            request159Body.FormPostParameters.Add("txtDefaultOffice", CompanyToPass);
            request159Body.FormPostParameters.Add("txtDefaultOfficeName", CompanyToPass);//"GMO NFA L 4 (150 Assets) (GMO-NFA-L-4)");// GMO-NFA-L-1
            request159Body.FormPostParameters.Add("chkTemplateOffice", "");// webTest.Context["$HIDDEN0.chkTemplateOffice"].ToString());
            request159Body.FormPostParameters.Add("btnSave.x", "Save");
            request159Body.FormPostParameters.Add("txtTab", webTest.Context["$HIDDEN0.txtTab"].ToString());
            request159Body.FormPostParameters.Add("txtPrevTab", webTest.Context["$HIDDEN0.txtPrevTab"].ToString());
            request159Body.FormPostParameters.Add("id", webTest.Context["$HIDDEN0.id"].ToString());
            request159Body.FormPostParameters.Add("hdnRole", webTest.Context["$HIDDEN0.hdnRole"].ToString());
            request159Body.FormPostParameters.Add("txtDejavu", webTest.Context["$HIDDEN0.txtDejavu"].ToString());
            //request159Body.FormPostParameters.Add("__ncforminfo", webTest.Context["$HIDDEN0.__ncforminfo"].ToString());
            request159.Body = request159Body;
            yield return request159;
            request159 = null;
            webTest.EndTransaction(WebRequestPrefix + "masters_user_overview.aspx_2");


            webTest.BeginTransaction(WebRequestPrefix + "finder_default.aspx_2");
            WebTestRequest request209 = new WebTestRequest((webTest.Context["AccountingURL"].ToString() + "/finder/default.aspx"));
            request209.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/plain, */*"));
            request209.Headers.Add(new WebTestRequestHeader("Referer", (webTest.Context["AccountingURL"].ToString() + "/masters/user/default.aspx?code=" + PassCreateName.ToUpper() + "&name=" + PassCreateName + "&msg=saveok")));
            request209.QueryStringParameters.Add("accessrules", "1", false, false);
            request209.QueryStringParameters.Add("mutualoffices", "1", false, false);
            request209.QueryStringParameters.Add("page", "0", false, false);
            request209.QueryStringParameters.Add("pattern", "", false, false);
            request209.QueryStringParameters.Add("type", "USR", false, false);
            yield return request209;
            request209 = null;
            webTest.EndTransaction(WebRequestPrefix + "finder_default.aspx_2");

            webTest.EndTransaction(WebBTPrefix + "SaveUser");
            #endregion

            if ((Convert.ToInt32(webTest.Context["iterationNo"])% Convert.ToInt32(webTest.Context["maxiterationNo"])) ==0)
            {
                foreach (var request in webTest.Logout(threadData, objPlugin)) yield return request;
                //RTMonitor.Write(Color.Green, "User Logout: " + threadData.UserName + " LogOutTime: " + DateTime.Now + "\r\n");
                Thread.Sleep(2000);
            }
        }
        
    }
    public class UserAccessSettings_A : WebTest
    {
        UserAccessSettings _UserAccessSettings = null;
        WebTestRequestPlugin objPlugin = new WebTestRequestPlugin();
        private WebTestContext _textContext;
        public UserAccessSettings_A()
        {
            if (_UserAccessSettings == null)
                _UserAccessSettings = new UserAccessSettings(this);


            this.Context.Add("LoginMain", AssemblyLoad.LoginMain);
            this.Context.Add("AccountingURL", AssemblyLoad.AccountingURL);
            this.Context.Add("TwfcndURL", AssemblyLoad.TwfcndURL);
            this.PreAuthenticate = true;
            this.Proxy = "default";
            this.StopOnError = true;
            _textContext = this.Context;

            this.PreWebTest += TwinfieldWebLoadTestPlugin.PreWebTestEvent;
            this.PreRequest += objPlugin.Test_PreRequest;
            this.PostRequest += objPlugin.Test_PostRequest;
        }

        public override IEnumerator<WebTestRequest> GetRequestEnumerator()
        {
            _textContext= this._textContext;
            return _UserAccessSettings.GetRequestEnumerator(TwinfieldDBTenant.A, Context.WebTestUserId.ToString(), objPlugin);
        }
    }

    public class UserAccessSettings_B : WebTest
    {
        UserAccessSettings _UserAccessSettings = null;
        WebTestRequestPlugin objPlugin = new WebTestRequestPlugin();
        private WebTestContext _textContext;
        public UserAccessSettings_B()
        {
            if (_UserAccessSettings == null)
                _UserAccessSettings = new UserAccessSettings(this);


            this.Context.Add("LoginMain", AssemblyLoad.LoginMain);
            this.Context.Add("AccountingURL", AssemblyLoad.AccountingURL);
            this.Context.Add("TwfcndURL", AssemblyLoad.TwfcndURL);
            this.PreAuthenticate = true;
            this.Proxy = "default";
            this.StopOnError = true;
            _textContext = this.Context;

            this.PreWebTest += TwinfieldWebLoadTestPlugin.PreWebTestEvent;
            this.PreRequest += objPlugin.Test_PreRequest;
            this.PostRequest += objPlugin.Test_PostRequest;
        }

        public override IEnumerator<WebTestRequest> GetRequestEnumerator()
        {
            _textContext = this._textContext;
            return _UserAccessSettings.GetRequestEnumerator(TwinfieldDBTenant.B, Context.WebTestUserId.ToString(), objPlugin);
        }
    }

    public class UserAccessSettings_C : WebTest
    {
        UserAccessSettings _UserAccessSettings = null;
        WebTestRequestPlugin objPlugin = new WebTestRequestPlugin();
        private WebTestContext _textContext;
        public UserAccessSettings_C()
        {
            if (_UserAccessSettings == null)
                _UserAccessSettings = new UserAccessSettings(this);


            this.Context.Add("LoginMain", AssemblyLoad.LoginMain);
            this.Context.Add("AccountingURL", AssemblyLoad.AccountingURL);
            this.Context.Add("TwfcndURL", AssemblyLoad.TwfcndURL);
            this.PreAuthenticate = true;
            this.Proxy = "default";
            this.StopOnError = true;
            _textContext = this.Context;

            this.PreWebTest += TwinfieldWebLoadTestPlugin.PreWebTestEvent;
            this.PreRequest += objPlugin.Test_PreRequest;
            this.PostRequest += objPlugin.Test_PostRequest;
        }

        public override IEnumerator<WebTestRequest> GetRequestEnumerator()
        {
            _textContext = this._textContext;
            return _UserAccessSettings.GetRequestEnumerator(TwinfieldDBTenant.C, Context.WebTestUserId.ToString(), objPlugin);
        }
    }

    public class UserAccessSettings_D : WebTest
    {
        UserAccessSettings _UserAccessSettings = null;
        WebTestRequestPlugin objPlugin = new WebTestRequestPlugin();
        private WebTestContext _textContext;
        public UserAccessSettings_D()
        {
            if (_UserAccessSettings == null)
                _UserAccessSettings = new UserAccessSettings(this);


            this.Context.Add("LoginMain", AssemblyLoad.LoginMain);
            this.Context.Add("AccountingURL", AssemblyLoad.AccountingURL);
            this.Context.Add("TwfcndURL", AssemblyLoad.TwfcndURL);
            this.PreAuthenticate = true;
            this.Proxy = "default";
            this.StopOnError = true;
            _textContext = this.Context;

            this.PreWebTest += TwinfieldWebLoadTestPlugin.PreWebTestEvent;
            this.PreRequest += objPlugin.Test_PreRequest;
            this.PostRequest += objPlugin.Test_PostRequest;
        }

        public override IEnumerator<WebTestRequest> GetRequestEnumerator()
        {
            _textContext = this._textContext;
            return _UserAccessSettings.GetRequestEnumerator(TwinfieldDBTenant.D, Context.WebTestUserId.ToString(), objPlugin);
        }
    }

    public class UserAccessSettings_E : WebTest
    {
        UserAccessSettings _UserAccessSettings = null;
        WebTestRequestPlugin objPlugin = new WebTestRequestPlugin();
        private WebTestContext _textContext;
        public UserAccessSettings_E()
        {
            if (_UserAccessSettings == null)
                _UserAccessSettings = new UserAccessSettings(this);


            this.Context.Add("LoginMain", AssemblyLoad.LoginMain);
            this.Context.Add("AccountingURL", AssemblyLoad.AccountingURL);
            this.Context.Add("TwfcndURL", AssemblyLoad.TwfcndURL);
            this.PreAuthenticate = true;
            this.Proxy = "default";
            this.StopOnError = true;
            _textContext = this.Context;

            this.PreWebTest += TwinfieldWebLoadTestPlugin.PreWebTestEvent;
            this.PreRequest += objPlugin.Test_PreRequest;
            this.PostRequest += objPlugin.Test_PostRequest;
        }

        public override IEnumerator<WebTestRequest> GetRequestEnumerator()
        {
            _textContext = this._textContext;
            return _UserAccessSettings.GetRequestEnumerator(TwinfieldDBTenant.E, Context.WebTestUserId.ToString(), objPlugin);
        }
    }
}
